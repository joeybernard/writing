AIDE - Developing for Android on Android

Android, as a platform, is one of the fastest growing on the planet. It is available on smartphones, and a series of different tablet sizes. Most devices also include a full spectrum of sensors that are available to programs that you install. So it makes for a very inviting platform to develop for. The usual workflow involves installing a development environment on some other machine, either a Windows or Linux desktop or laptop. You then do all of your code writing, compiling and debugging there before you actually copy it and install it onto your Android device. But, there are many times when you want to develop on the road, or you want to shorten the cycle by developing on your Android device itself. One of the better options out there is AIDE, the Android Java IDE. [aide1.png or aide1-b.png] AIDE is distributed under a freemium model. The free version allows you to develop, compile and run your code. It also allows you to install to the device that AIDE is running on. But, if you want to generate APK files that can be used to install onto other devices, you will need to purchase the full version. In this article, we'll start with getting AIDE installed and creating a new program. We'll see what is involved in coding, debugging and running your new program. Further information is available at their Google+ page.

The first step is to install AIDE on your Android device. Opening up the Play Store, you can do a search for "AIDE". The appropriate package should show up at the top of the list. If you are in doubt, verify that the developer is "appfour GmbH". AIDE takes up over 12MB od space, so if you are running short of space you can transfer the majority of it to an SD card, leaving 4.45MB in your device's main storage. The very first time you start up AIDE, it will pop up a dialog box where you can enter the details for a beginning project. [aide2.png] In this dialog, you can enter an App Name and a Package Name. You can also select an app template from some builtin ones. These are "Hello World", "Tetris" and "Analog Clock Widget". These templates will setup the folders and files for your new project. Once you click on create, the files will be created in the folder "/mnt/sdcard/appname" (where appname is the name your gave your project) and this new project will be opened up in the IDE. [aide3.png] The main part of the IDE consists of two panes. Their alignment depends on the size of the device that you are running it on. On my phone, the panes are one above the other and on my tablet the panes are side by side. [aide3-b.png] The first pane is a file listing for your project, containing all of the properties, resources and source files needed for an Android project. The second pane is the main editor, where the central file (MainActivity.java) gets loaded on project creation. If you start with one of the templates, you can compile it and run it right away to see how the process works. Click on the menu button, and select the "Run" option. This will pop up a dialog button, informing you of each step being done. It will compile your code, link it, and create AN APK file. In order to actually run it, this APK file needs to be installed. So an installation dialog will appear asking you if you wish to install it. [aide4.png] Once installed, it will then start it up and you will have your very first Android application, developed completely on Android. [aide4-b.png]

All of the apps that you develop in AIDE are structured as projects. Anyone used to using IDE's, like eclipse, should be used to this. This means that if you want to work on a different app, you will need to close the current project and open a new one. To close a project, you need to click on the menu button, select "More" and then "Close Project". This will still leave you in the main directory of your current project. To see your other projects, you will have to click on the ".." entry in the file pane to move up one directory. Here, you should see three standard entries, then a folder for each of your projects. [aide5.png] The first entry is a tool to let you clone a git repository to your Android device. The dialog that pops up allows you to enter a repository URL and a directory name. [aide5-b.png] If you have already done some development work and have the code up on Dropbox, you can download the relevant folder directly within AIDE. The third option is to create a new project. Selecting this option brings up the dialog you saw when you started AIDE the very first time. To load a project into the IDE, it isn't enough to simply select the project folder. Within the folder is an option to "Open this App Project". This will load all of the meta information about your project, like its properties and resource file locations.

Now that we know a little bit how projects are handled, let's start creating our very first app. If you have a project open right now, go ahead and close it. Change directories in the file pane until you are in the main directory for all of you projects. From here, you can select "Create new App Project here" and name your project "MyFirstApp". You can set the package name to whatever you would like, as long as it follows the usual format. Also, be sure that you have selected the "Hello World" app template. Once everything is filled in, go ahead and click the create button. This will create all of the required files and open the new project in the IDE. The file "MainActivity.java" extends the class "Activity". This is the main class that you will be dealing with when developing apps. Your app builds on this class and overrides the methods within it to have your app do its own thing. The first method to override is "onCreate". This method gets called when your activity first gets created. The usual tasks involve creating the graphical elements of your program and getting them initially rendered and displayed. The first step (super.onCreate) runs the code in the main class "Activity" to handle all of the OS related tasks in creating a new activity. You then add your own code, usually GUI creation. In the Hello World template, it includes a call to the "setContentView" method, which assigns a particular layout as the content view. The beginning value is the layout "R.layout.main". Layouts are XML files, containing all of the elements that make up your graphical interface. To get to this file, you can change to the directory "res", then "layout". Within this subdirectory, you will find XML files for each layout that is defined. [aide6.png] In this simple program, we just have a single file called "main.xml". Selecting it in the file pane will load it into the editor pane. The outermost container in the XML file is the type of layout being defined. There are a number of options available. In the Hello World template, the layout type being used is a LinearLayout. You can set a width and height for the entire layout with the properties "android:layout_width" and "android:layout_height". In this example, we will leave the defaults of "fill_parent" for both. You can also set the orientation of the display, in this case it is vertical. The individual elements for the graphical display are defined as internal XML containers within the outermost Layout container. In this example, there is  a "TextView" object, where you can set various properties like the width, height or the text to be displayed. The proper way to include things like text strings, or anything else that may be reused, is to store them once as a resource and to refer to this string with a resource identifier. In this example, the identifier is "@string/hello". The actual text string is stored in the file "strings.xml", which is located in the directory "res/values". The outermost container of this XML file is the tag "resources". Within this, are the list of all of the resources available to your program. [aide7.png] In this case, we just have two strings: one for the app name and one for the text content of the main window.

To this example, we will add a button to change the text being displayed. To do any amount of typing, you will want to either download and install a more complete soft-keyboard, or use an external bluetooth keyboard. A good soft-keyboard is the hacker's keyboard. It includes a lot of extra keys that are useful in code editing. These include arrow keys, to aid navigation, and real control, tab and escape keys. Most soft-keyboards included on Android devices lack these. Open the main layout file, and below the TextView add a new tag for a Button entry with the following code:
   <Button
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:text="@string/button_title" />
AIDE actually does a continuous code check to be sure there aren't any errors in the code. This means that while you are typing the above additions, you will likely see errors until you finally finish. The editor includes tab completion. So, you can start typing "<Butt" and then hit tab and the editor will fill out the rest of the word for you. This is because "Button" is actually a special word in Android development. Once you add the above, you can click the menu button, select "More" and the select "Refresh Build". This will try and do a full rebuild of your app and you will see an error about the missing string resource. [aide8.png] If you have multiple errors, clicking on the error in the list will bring you to the location where the error appears. To fix this particular error, you will need to add the following text to the file "res/values/strings.xml":
   <string name="button_title">My Button</string>
[aide8-b.png] When you get to the end of this line and start typing "</", the editor will automatically fill in the rest of the line for you. When you refresh the build, the error should go away; assuming that you haven't introduced any typos. Buttons are expected to trigger some reaction, however. This means that you will likely want to add some kind of callback to a function in your button. This handled within the layout file where the button is defined. You can add an extra property, "onClick", which gives a method name to be called when the button is clicked. For example, you might have the following
      android:onClick="my_method"
in the button definition. [aide9.png] You can then add the function "my_method" to the file "MainActivity.java". This new method needs to be public, and return void. Also, the only input parameter is a View object. Since we want to change the text in the TextView object, we'll need to add an ID so that we can refer to it. In the "main.xml" file, add the following property to the TextView entry:
      android:id="@+id/view_text"
[aide10.png] You can then use "view_text" to access the text display. In the method "my_method", you can get a reference to this text field with the line
      TextView tview = (TextView)findViewById(R.id.view_text);
You can then reset the text to be "The button was clicked" with
      tview.setText("The button was clicked");
[aide11.png] Now when you click on "Run", your program will be recompiled, reinstalled and opened. Now you can see what happens when you click on the added button. [aide12.png] [aide12-b.png]

I've only had the space to do provide a short introduction to AIDE and all of its super powers. We also haven't really looked at more than the most basic features of an Android application. There are lots of tutorials around to get you up to speed in Android development, and now you can run through these tutorials on the go.



URLs
Google+ Page - https://plus.google.com/101304250883271700981/about



Images
aide1.png - AIDE is available as a free download from the Google Play store (web).
aide1-b.png - AIDE is available as a free download from the Google Play store (app).
aide2.png - When AIDE starts up the first time, you are shown a dialog for your first project.
aide3.png - When you open a project, it gets pulled up into the IDE.
aide3-b.png - The tablet interface opens with panes side-by-side.
aide4.png - Security requires that you approve any app being installed.
aide4-b.png - After compiling and installing, AIDE will run your new program.
aide5.png - You can create new projects several different ways.
aide5-b.png - Cloning a git repository is a fairly easy task.
aide6.png - Layout files are stored in the subdirectory "res/layout"
aide7.png - Resources for your program are stored in a series of XML files.
aide8.png - Any errors that crop up during a rebuild are listed here.
aide8-b.png - You can add new string resources to the file strings.xml.
aide9.png - You add callbacks for buttons in the main.xml file.
aide10.png - You need to add id labels to interact with items in your program.
aide11.png - The actual callback code goes into MainActivity.java.
aide12.png - Before pressing the button
aide12-b.png - After pressing the button.
aide-extra1.png - There are lots of functions in the menu not covered here.
aide-extra2.png - The premium version adds even more capabilities.
