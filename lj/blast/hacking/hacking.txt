Hacking, Old School


One of the original areas that used the term hacking is in computer networks. When you mention hacking in the general public, the image that pops into their minds is of the nerdy guy breaking into a computer system from their bedroom. We'll take a look at some of the tools available to do just this. Of course, this is for information purposes only, so please don't do anything nasty. Remember, with great power comes great responsibility. Most people have heard of tools like nmap, or nessus. Here we'll look at some other tools that are available to play around with networks.

The grand-daddy of network utilities is tcpdump. This utility simply listens to all of the network traffic that is going by and record these packets for later analysis. If you have more than one network interface, you can select which one to listen to with the option "-i interface". By default, tcpdump puts your network card into promiscuous mode so that it can record all packets that exist on the network cable. If you want to limit the packets recorded to simply those destined for your machine, you can use the option "-p" to turn off promiscuous mode. There are lots of options available to tcpdump, so please checkout the man page to see what they are.

One of the things you may want to do is find out what machines exist on your network. There are several tools available to do this by actively sending out queries on the network. The problem with tools using this technique is that you end up creating traffic on the network, and this may be noticed by a good network administrator. A way around this is to use the tool p0f. This utility uses passive techniques to try and guess what machines exist on the network and properties about these machines. If you have more than one network interface, you can select which interface to use with the option "-i interface". p0f can work with tcpdump files. If you have a tcpdump file that you created earlier, you can get p0f to use it rather than live capture by using the option "-s file". You can also use p0f to record network traffic into a tcpdump file with the option "-w file". If you're using p0f in a script, you can use the option "-o file" to dump the output into a text file for later perusal.

By default, p0f only looks at network packets that are addressed to the machine where it is running. To look at all of the packets that go by on the network, you will need to set the card into promiscuous mode with the option "-p". By default, p0f only sees machines when they open new connections. You can try and guess what is going on with already opened connections with the option "-O". This option can generate a lot of data, so you probably won't want to use for any extended periods of time. More and more often, these days, machines are actually located behind routers and NATs, so they don't actually show up as individual machines. You can try and identify these types of machines with the option "-M". This uses the masquerade detection algorithm to try and identify individual machines in these situations.

Once you know what machines exist on the network, you may be interested in what traffic is travelling to these machines, and who is generating this traffic. You can use dsniff to take a look at the usernames and passwords being used to access services on the network. It can handle many different protocols, such as FTP, HTTP, POP, IMAP, X11, and many others. You can tell dsniff which interface to listen on with the option "-i interface". Like most network tools, you can read previously recorded network data using the option "-p file". Alternatively, you can use dsniff to record the network data rather than parsing it with the option "-w file". You can enable automatic protocol detection by using the option "-m". This can give you some of the gory details about people on your network.

Now that you know some details about your network, and the people on it, you may want to check the security of some of the services provided. One common target for security problems are web servers. You can use the tool nikto to do an assessment of how secure your web server is. You select the host with the option "-h hostname". If you have a series of hosts you want to check, you can place the hostnames (or IP addresses) in a text file and hand them into nikto with the option "-h file". The default port nikto looks at is port 80. If you want to check out a web server on some other port, you simply need to use the option "-p port". There are tons of extra options in terms of what specific security issues to test for, far too much here. Maybe I'll put together a full length article some time in the future. For now, you'll have to be satisfied with the manual at the home page for the project (http://cirt.net/nikto2).

The last thing I'll cover about hacking is how to check out your own backyard. There are those out there who will use this kind of knowledge for nefarious purposes. A utility you can use is chkrootkit. This utility analyzes your systems and tries to determine whether or not it has been tampered with. You can get a lit of the tests in can perform with the option "-l". With the standard install on my Ubuntu box, chkrootkit has 69 tests available. You can check things like whether "ls" has been infected. Or you can check for evidence of rootkits that may have been installed. Hopefully you won't find anything when you run chkrootkit.

Well, now you have a few new tools that you can use to play around with your networks. Hopefully, you won't find any people doing anything nasty on your network. And remember, if you are going to use these tools, be sure you have permission before you do anything that might be frowned on. Other than that, hack away and keep learning.
