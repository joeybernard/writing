Handling R Packages

In a previous issue, we looked at a quick introduction to the statistics program R. One of the great features of R is its modular nature. As people develop new functionality, R is designe dto make it relatively easy to package up this new functionality and share it with other users of R. In fact, there is an entire repository of such packages, offering all sorts of goodies for your statistical needs. This month, we'll look at how to see what libraries are already installed, how to install new ones and keep them up to date. We'll finish off with a quick look at how to create your own.

The first step is to take a look and see what libraries are already installed on your system. [R1.png] You can do this by running 'library()' from within R. This will give you a list of all of the libraries installed in the various locations visible to R. If you find the library that you are interested in, your work is almost done. In order to get R to load the library of interest into your workspace, you will need to call 'library' with the name of the library in the brackets. So, let's say you wanted to do parallel code with the multicore library. Then you would call 'library("multicore")'. If you want to learn more about the library, R includes a help system that is modelled after the man page system used in Linux. There are two ways you can access this. The first is the use the 'help()' command. So in this case, you would run 'help("multicore")'. [R2.png] The shortest way to get help is to use the special character '?'. So you would type '?multicore' to get the same result. A related command that is good to know is '??'. It does a search through the library names and descriptions based on the text given. For example, '??plot' will pull up entries related to the word plot. [R3.png]

But, what if the library you are interested in isn't already on your system? You will need to get it installed somehow. Luckily, R has a full package management system built in. Installing a package is as easy as running 'install.packages()', where you hand in a list of package names. But, what packages are available for installation? The R project has a full repository of packages, ready for you to use. You can find them at http://cran.r-project.org. On the left hand menu, you will find an entry called "Packages", which will bring you to list of packages. You can search alphabetically by name or by category. Let's say you are interested in doing linear programming. On CRAN, you will be able to find a package called 'linprog', which you can install with the command 'install.packages("linprog")'. When you first run this command, it should come back with an error. [R4.png] By default, R will try and install packages into the system library location. But unless you are running as root (and you aren't doing that, right?), you won't have the proper permissions to do so. Therefore, R will ask if you wish to install the new package into a personal library storage location in your home directory. After you agree to this, it will go ahead and try to download the source for this package. If this is the first time you have installed a package, R will ask you to select a CRAN mirror to download from. This mirror will be used for all future downloads. By default, R will also download and install any dependencies the requested package needs. So in this sense, it really is a proper package management system.

For many packages, all that is involved is strictly R code. But in some cases, the author may have written part of the code in some other language, like C or FORTRAN, and wrapped it in R code. In these types of packages, this other code would need to be compiled into binary code before it can be used. But how can you do that? Well, the R package system can actually handle compiling external code as part of the installation process. In some cases, this external code may need other third-party libraries in order to be compiled. In order to hand in locations for these, you will need to hand in some options to the 'install.packages' function call. Checking the help page (with '?install.packages'), you can see that you can include installation options as "INSTALL_opts".

So, now that you have your collection of packages all installed and configured on your system, what do you do if a bug gets fixed in one of them? Or, what happens if a new version comes out with a better algorithm?


Captions
R1.png - The command 'library()' will give you a list of currently installed libraries.
R2.png - Getting help on a library.
R3.png - Looking for help on plots.
R4.png - Trying to install a library in the system location won't work.
