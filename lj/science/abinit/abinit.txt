ABINIT for Chemists

The single largest group of users on our high-performance computing clusters has to be the chemists. Their CPU-year count is definitely at the very top of the list. Because of this heavy use, there are several different packages that have become standard tools that are used by most computational chemistry researchers. This month, we will take an introductory look at one called ABINIT. ABINIT calculates the energy and structure of groups of nuclei and electrons. The method used to make these calculations is Density Functional Theory (DFT). If you want to know more about the underlying theory, feel free to go talk to your nearest computational chemist. While my exposure has been with people running ABINIT on scores of machines in parallel, at least in a learning environment, or for small systems, there is nothing stopping you from running it on your own desktop. The first step, of course, is to install it on your machine. You may have packages within your distribution to make installation easier. For example, on Debian-based systems, you can install it with
   sudo apt-get install abinit abinit-data abinit-doc
The only issue with this method is that you will probably get an older version of ABINIT. At the time of writing this, the Ubuntu package installs version 7.8.2, while on the web site you can download version 7.10.5. If you need the latest available code, you can always get the source code from the main home page and compile it yourself on your local machine. In order to build it yourself, you will need the usual utilities to build other packages, such as make, libtool and autoconf. Since the majority of the code is written in FORTRAN, you will also need a compiler capable of compiling F90 code. This will allow you to build a basic version of ABINIT. You can include extra functionality, such as MPI or NetCDF, if you have them available on your system.

The main executable to run these calculations is called 'abinit'. It takes a number of input files in order to do the actual calculation. One of these input files is actually a file of files. It is a file that contains a list of other input files that abinit needs to read in. The usual file name ending used is ".files". If you have this input file, you can run your simulation with
   abinit < my_input.files >& log
This tells abinit to read the input data from standard input (attached to the file my_input.files) and to write its results to standard output (attached to the file log). The log file only captures output that gets written out to the standard output stream. There is a lot more output that gets written out. These other output files are defined in the "my_input.files" file. A fuller description of the contents are
   ab_in - main input file
   ab_out - main output file
   abi - root file name for other input files
   abo - root file name for other output files
   tmp - root file name for temporary files
   my.psp - the pseudopotential used for this run
The root names "abi", "abo" and "tmp" are used to create the multiple files for each of those sections. There are a couple of rules around the input files that may cause problems if you don't follow them. The first is that you can't have tab characters in your input file. So, be sure that your editor uses space characters when you hit the tab key. The second rule is around using negative numbers. There can't be any spaces between the negative sign and the first digit of the number. The last formatting rule is that no line can be more than 132 characters. If any lines end up longer than that, ABINIT will simply ignore any extra content. If you get errors when trying to run your own jobs, these are likely the first few places to look. There are a massive number of input variables that allow you to control parameters around file handling, geometry, structure optimization and response functions, among many other. These input variables can be in any order. The entire file gets parsed before the calculations start. When you start creating your own input files, you will probably want to be able to check them, somehow. Luckily, you can use ABINIT itself to do this. The executable abinit includes an option (-d or --dry-run) to take your input files and validate them without starting the calculations. This allows you to at least catch major typos before wasting the time involved in doing a partial run and having it fail.

Along with your own input files, describing the geometry and other descriptive variables, ABINIT needs input files that describe something called the pseudopotential for your system. There are different types, such as Troullier-Martins or Hartwigsen-Goedecker-Hutter pseudopotentials, that can be used for different situations. Luckily, ABINIT includes pseudopotentials for the entire periodic table. This means that you can simply build up your molecule by including the pseudopotentials for each of the different types of atoms in your system. While it isn't necessary in most cases, you can create your own for some very specialized system, if needed. The other thing to be aware of is that ABINIT is released under a GPL license. This means that you have access to all of the source code and can investigate exactly how the calculations are being done. When doing fundamental scientific research, this can be very important. You may be trying to do calculations in a region where the available algorithm is no longer valid. All of these calculations make assumptions to try and simplify the calculations so that they are actually doable, and it is very important to keep that in mind. But, with access to the code, you have the opportunity to make changes to these algorithms to better fit the assumptions that are valid for your problem. This open source code gives you the ability to build on all of this past work and push it into new areas of research. Just remember to pass these extensions and improvements on to the next group of researchers to keep pushing our understanding forward.

Interpreting the output from ABINIT can be a bit of a job. There is a lot of output, describing how the calculated values progressed until they reached the requested accuracy to the actual answer. For example, if you are calculating the energy for a molecular configuration, you probably are interested in when the energy is at its lowest value. This will be the most stable configuration for these nuclei and electrons. But, how do you interpret this output? There are several tools available to take the geometric portion of this output and plot it so that you can see what the configuration actually looks like. There will also be output describing how strong the various connections between the nuclei are, which you can use to see how reactive your molecule may be.

We were only able to do a very basic introduction to what is involved when using ABINIT. Hopefully, though, you now feel a bit more comfortable digging into the massive documentation and using ABINIT to solve whatever molecular problem you are dealing with. When you are ready, you can move to much larger problems by using the MPI capabilities in ABINIT to to use as many machines as you have access to.



URLs
Main Home Page  -  http://www.abinit.org
Theory Description  -  https://en.wikipedia.org/wiki/Density_functional_theory
