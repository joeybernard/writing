Going to Jupyter on an Anaconda


This month, we will look at one last use of Anaconda to do scientific computations. Specifically, we will be looking at jupyter, and how it interacts with the Anaconda installation. I will assume that you already have Anaconda installed on your system. Jupyter should already be installed as part of the default Anaconda setup. You can start it up from the Anaconda Navigator by clicking the Launch icon in the Jupyter Notebook pane. [jupyter1.png] This will start jupyter up and then launch your default browser to connect to the engine. Unless you configured jupyter differently, it will start with your home directory as the starting folder for the dashboard. One issue is that you don't have access to the console output from jupyter, and trying to shut it down doesn't always work correctly. You may want, instead, to start jupyter from the command line. Opening up a terminal, you can enter the command 'jupyter notebook' or 'jupyter-notebook' to start the main engine. You will get a bunch of initialization messages on the console, and it will start up your default browser, just as above. [jupyter2.png] With command line options, you can control almost all of the parameters around jupyter. For example, you can start it up with the option "--no-browser" to stop your default browser from being opened when you start jupyter. When you do this, it is up to you to get the URL correct in order to connect to the jupyter engine. The default settings tell jupyter to use a token to secure the system somewhat, and this token forms part of the URL you need to use.

Once jupyter is up and running, what kinds of things can you do with it? The first thing that comes to mind is creating an IPython notebook and running interactive code. This is what most people do when they install and use jupyter. Clicking on the 'New' button at the top right-hand side of the dashboard allows you to select what type of notebook to start up. The default will be an IPython notebook using your default version of Python. Jupyter is designed to be extendable, however, so that you could hypothetically use it to start other types of notebooks. The most common options are to use it to start up R or Julia. When you do create a new notebook, a new browser tab (or window, depending on how your browser is configured) will be opened with a blank notebook available for you to start your work. [jupyter3.png] If you have used IPython before, then the interface should be reasonably familiar. Input and output is defined by cells. Input cells can have entire blocks of code written in them, and this code is executed as a single unit. As an example, you could run the following code within a cell. You can edit and re-edit the contents. Once you have everything ready, you can execute the contents by typing SHIFT-ENTER while the cursor is in the cell in question. The other option is to click on the run icon at the top of the notebook. [jupyter4.png] The cells are labelled in the standard IPython way, with the input cells labelled as 'In' with a number indicating the order in which they were executed. You can access the results from previous cells by using the special variables '_', '__' and '___'. In fact, there is a complete history all of the commands executed, available through the IPython magic %history.

Speaking of magics, all of the IPython magic commands are available through your notebook. Both line magics and cell magics can be used. For example, when you start profiling your code, you can use the %timeit magic to see how long some particular chunk of code. Say you had a loop, like that below, that needs to be timed.
   total = 0
   for i in range(100000):
      total *= math.tan(i)
You can time this entire chunk of code by using the cell magic %%timeit. You will then get output like the following.
   10 loops, best of 3: 29.6 ms per loop
This allows you to play with code variations within your research paper and be able to keep a record of the effects of various changes to your code. There are several other magics available, allowing you to interact with the IPython engine in fun and creative ways. You can even create your own custom magics if none of the builtin ones do exactly what you need it to.

One of the nice features in jupyter is the ability to embed plots and graphics directly within your notebook, right next to the code that generated it. This is a huge benefit in the move towards reproducible research. This way, you always have the code that generated a given plot available and it can always be rerun when needed. The default settings are for your plots to be displayed inline within your document. You can import matplotlib and use it just like from within any other Python code. Once you finish your plot and call the show method, you will end up with it rendered within the page. [jupyter5.png] This is a full IPython instance, so you have access to all of the functionality you expect to have from matplotlib. You do need to be aware of how, fundamentally, jupyter notebooks work. The IPython engine maintains state based on the actual order that code is executed, not necessarily what order code is in on the notebook page. Once you have a notebook ready, you may want to re-evaluate the entire notebook, all at once. This way you can verify that it all behaves the way you are expecting it to. You can do this by clicking on the menu item "Kernel->Restart & Run All". 

Along with the usual notebooks that you can create, the default installation of jupyter that comes with Anaconda includes the functionality that allows you to open a new web-based terminal. [jupyter6.png] This is a great way for you to work on a remote machine without having to leave your browser. It has support for most of the functionality available in modern terminal emulators, but it isn't perfect. You may run into issues if your text-based application pushes the terminal emulation too far. When you finish working in a given terminal, you can click on the "Logout" button at the top right-hand side of the window. If you don't, it will still be running in the background. You can always get back to it, or shut it down, by clicking on the "Running" tab. [jupyter7.png]

With jupyter, you have access to your computing hardware from anywhere that has web access. With a modern browser and a network connection, you have the ability to work on your computational tasks whenever you have the time. You can export your notebooks in several different formats when you wish to share your work with others. Under the menu item "File->Download as", you should have several different options. You can export your notebook as a single HTML file, which will give you the same rendering as the original notebook.  If you are planning on submitting a scientific paper, you can export it as a LaTeX file. If you have the correct software installed, you can have the LaTeX file converted to a PDF before downloading it to your local machine. There are lots of options allowing you to share your work with others.



IMAGES
jupyter1.png  -  Launching jupyter starts as a dashboard where you can see all of the files and folders available to jupyter.
jupyter2.png  -  When you start jupyter from a terminal, you will get all of the console messages and be able to monitor the run.
jupyter3.png  -  Creating a new notebook spawns a new IPython engine and a new browser window where you can start working.
jupyter4.png  -  You can run chunks of code interactively within cells of your jupyter notebook.
jupyter5.png  -  You can generate and render plots and graphs directly within a jupyter notebook, keeping all parts of your research together in one location.
jupyter6.png  -  The default installation of jupyter that comes with Anaconda allows you to open web-based terminals. You can use these to interact with the machine which is hosting your jupyter installation.
jupyter7.png  -  When you close browser windows, you can re-open those processes running in the background.
