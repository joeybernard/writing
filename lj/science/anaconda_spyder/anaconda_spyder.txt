Spyders for Science



If we want to do science with Anaconda, one of the first places to look is the package spyder, included in the basic Anaconda installation. Spyder is short for the Scientific PYthon Development EnviRonment. You can kind of think of it as an IDE for scientific programming within Python. You will probably want to make sure that you have the latest version available, since it is under fairly constant development. You can be sure that your entire Anaconda installation is up to date with the command
   conda update anaconda
There are two ways that you can launch spyder. If you are using the Anaconda Navigator, you can simply click the spyder icon. [spyder1.png] If you have a terminal window open, you can also launch spyder by simply typing in 'spyder' and hitting enter. You may get a pop up window saying that spyder is not the latest version. This is just because the version within Anaconda is a few revisions back.

Once you have spyder started, you should see an open editor window on the left-hand side and a Python console window in the lower right-hand side. [spyder2.png] The upper right-hand side is used for a help browser, a variable explorer and a file explorer. Like most IDEs, you can change which panes are visible and their layout within the window. You can begin working with spyder immediately by using the console window. The new default in spyder is to provide an IPython console that you can use to interact with the Python engine directly. It works, essentially, the same way that it works on the command line. The big difference is that spyder can inspect the contents of the Python engine and can do things like display variables and their contents within the variable explorer. [spyder3.png] While this is fine for smaller code snippets, you will end up working on much larger chunks of code. In this case, you can use the editor to write functions and larger pieces. In order to actually execute this Python code, you can either click the green arrow icon, click on the menu item 'Run->Run' or hit the F5 key. Again, the results are available from within the variable explorer. If, instead, you click on the blue arrow icon (or click on the menu item 'Debug->Debug') your code will be run within the IPython debugger. This lets you step through your code one line at a time. [spyder4.png] You can get more control over the debugging by adding breakpoints to your code. This can be done by double-clicking the left-hand gutter in the editor pane. You should see a dot added for each breakpoint inserted.

There are several tools available to work on code and algorithm quality. You probably will want to start with a static code analysis. You can run it by either clicking the menu item 'Source->Run static code analysis' or pressing F8. This will run the analysis and pop up the results in a new pane in the top right-hand pane. [spyder5.png] The results are categorized into convention breaks, refactoring suggestions, syntax warnings and actual errors in your code. This will catch the most obvious errors. Once you have code that actually works, the next step is to check the performance of your code. Spyder includes a front-end that gives you access to the profiler included in the standard Python library. You can start it up by either clicking the menu item 'Run->Profile' or pressing F10. Once it finishes, it will pop up a new pane in the same upper left-hand location. [spyder6.png] Unfortunately, the default profiler only goes down to the function level and this may not be fine enough in detail. If this is the case, then we can dive into one of the great features of spyder, its plugin architecture. There are several plugins that are already included within the Anaconda repository. You can use the following command to install the line profiler plugin.
   conda install -c spyder-ide spyder-line-profiler
You can then add the function decorator @profile to any functions that you want to dive into, and then start the line profiler by either clicking the menu item 'Run->Profile line by line' or pressing shift-F10. You will then get the results in a new output pane. [spyder7.png] You can see how much time is spent on each line, both per hit and the total for the complete program run. This way, you can focus on the most costly parts of your code to get better performance.

Along with optimizing time, the other parameter that you will want to look at optimizing is memory usage. This is becoming much more important as more and more research is focusing on big data problems. In these cases, you will want to use the following command to install the memory profiler plugin for spyder.
   conda install -c spyder-ide spyder-memory-profiler
Once the plugin is installed, you can add the decorator @profile just as with the line profiler. You can start the memory profiler by either clicking the menu item 'Run->Profile memory line by line' or pressing control-shift-F10. This will pop up another pane in the top right-hand side, where you can see how memory usage changes after each line of code. This way, you can figure what which lines of code are being wasteful and where to focus your brain power for improving performance.

For scientific computing, the last item we will look at is the ability to visualize data. Many times, humans can make intuitive leaps by being able to see how data looks. The default settings for spyder is that graphs are drawn inline within the IPython console. [spyder9.png] This is fine for a quick look at data, but it isn't the easiest to look at. If you click on the menu item 'Tools->Preferences', you will get a new window where you can change this behaviour and have plots show up in a new window, instead. [spyder10.png] If you rerun the code, you will now get the plot in a new window. [spyder11.png] This allows for the ability to play with the plot display, and even save off the final image. If you change the settings around plotting in the preferences, you may need to restart the IPython engine to pick up the new preferences.

That should be enough to get you started using spyder in your computational science problems. Next issue, we will look at the version of jupyter that is included with Anaconda and see how it can be used effectively. Both tools are good, but they fit within slightly different ecological niches.



IMAGES
spyder1.png  -  You can start spyder directly from the Anaconda Navigator
spyder2.png  -  Starting spyder up gives you an empty editor window to start your first project.
spyder3.png  -  You can interact directly with the IPython console.
spyder4.png  -  Spyder include a front-end, allowing you to interact with ipdb, the IPython debugger.
spyder5.png  -  You can run a static code analysis to check for syntactic errors.
spyder6.png  -  When you run the profiler, you get a display of how much time is being used in each function.
spyder7.png  -  You can use the line profiler to dive into how efficient functions are in more detail.
spyder8.png  -  There is a memory profiler plugin for spyder that allows you to figure out how to optimize memory usage.
spyder9.png  -  By default, spyder allows you to generate plots within the IPython console.
spyder10.png  -  You can change the preferences on how plots get generated and displayed.
spyder11.png  -  Generating plots in their own window allows for more interaction.
