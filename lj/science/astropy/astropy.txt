Doing Astronomy with Python

The power of Python is that you can find a module for almost anything. This month, we'll look at doing astronomy calculations, like image processing and observatory calculations. Since this is a Python program, you can install it with either pip or easy_install. Your Linux distribution should have a package included. For example, in Debian-based distributions, you can install it with
   sudo apt-get install python-astropy
There is also a separate package, 'python-astropy-doc', that contains extra documentation for astropy. Since astropy is a fairly large system, it is broken up into smaller sub-packages. This should be familiar to anyone who has worked with packages like scipy or numpy before. So, simply using
   import astropy
is actually not very useful. You are more likely to need to import individual sub-packages with commands like
   from astropy.io import fits
There are sub-packages to handle file IO, cosmological calculations, coordinate systems, among many other topics. It was developed originally by the Space Telescope Science Institute. We will look at a basic introduction to some of the available functionality to give you a flavor of what you can do.

The first item we'll look at is how to deal with data files. The common file format used in astrophysics and astronomy is the FITS file format. The Python package PyFITS was written to read and write FITS files. This code is actually the same as the code in the sub-package 'astropy.io.fits', so you can use it in the same way. You can actually even just drop astropy in as a plugin with
   from astropy.io import fits as pyfits
This way, you can use existing file management code without having to make any changes. The first thing you need to do is open you data file with
   from astropy.io import fits
   hdulist = fits.open("My_File.fit")
This returns an object that behaves like a list. Each element of the returned object maps to a Header-Data Unit (HDU) in the file. You can get more information on the file with the command
   hdulist.info()
Each of the individual elements have a header and data portion. You can access them to see details about the data you are about to process. Along with all of the library functions, astropy includes a series of command-line utilities to work with FITS files. You can check the headers of a FITS file with the utility 'fitsheader'. You can check your FITS file with 'fitscheck', and even find the differences between two files with 'fitsdiff'.

A common computational process that happens in astronomy is image processing. The sub-package convolution gives you two categories of convolution operations, direct and FFT. You can do 1, 2 and 3 dimensional convolutions. The visualization sub-package handles more basic image processing, like normalization and stretching. You can combine multiple transformations very easily. The '+' operator is overloaded to apply transformations that are 'added' together in series. So, a command like
   transform = SqrtStretch() + PercentileInterval(90.)
gives you a new function, 'transform', that combines the two separate transformations in a single step. This sub-package also includes a script, 'fits2bitmap', that can do conversions between different file formats. A second big computational task is doing statistics based on the observations made. There is a sub-package, called 'stats', that is available to you. While the 'scipy.stats' sub-package provides a lot of functionality, there are some astronomy focused functions that are missing. The 'astropy.stats' sub-package fills in these missing functions. Once you have your data loaded, you can use the 'modeling' sub-package. You can do 1D and 2D modeling with 'astropy.modeling'. This includes curve fitting functionality, where you can do linear and nonlinear function fitting. There are built-in functions to fit Gaussian curves, and polynomials. This fitting is handled with a least-squares method. With version 1.0, you can build compound models by combining existing models with arithmetic operators.

When you are ready to start doing calculations, you will need to use constants in your calculations. Instead of remembering them, or using them with potential typos, astropy includes a complete list of all of the standard scientific constants that you will need when doing numerical work. You can import the entire list with
   from astropy import constants
If you only need a few of the constants, like maybe the speed of light, you can import them individually with
   from astropy.constants import c
The really cool thing about these constants is that they are actually 'Quantity' objects. This means you can do something like change the units being used with a command like
   c.to('km/s')
Because it is so prevalent, you can use CGS units with 'c.cgs'. There are also two sub-packages to handle coordinate systems. Astronomical coordinate systems are handled by the 'coordinates' sub-package and world coordinate systems are handled by the 'wcs' sub-package. In the 'coordinates' sub-package, the core object is the 'SkyCoord' object. There are methods of this object to handle conversions between coordinate systems, or distances from one point to the origin within a given coordinate system. The 'wcs' sub-package allows for mapping data within FITS file onto a "real world" coordinate system in order to analyze them correctly. This includes functionality to deal with complications, like projections onto t the sphere of the sky.

You can even do cosmological calculations with astropy. The cosmology sub-package includes functionality to actually model the evolution of the entire cosmos based on a set of initial conditions that you set. While you can set your own cosmology, there are several built-in cosmologies available. These are based on the WMAP and Planck satellite data. Most functionality is built off of a core FLRW object. This object represents a homogeneous, isotropic cosmology, defined by the Friedmann-Lemaitre-Robertson-Walker metric from General Relativity. However, this class can't be used directly. You need to first subclass it. There are several included in the cosmology sub-package, such as the FlatLambdaCDM object that includes dark energy. You can look at various values, like the Hubble constant, at various points during the evolution of the cosmology. You can include contributions to the energy density from matter, dark energy, and even photons and neutrinos.

Now that you've seen a bit of what you can do with astropy, if astronomical calculations are something on your radar, there is much more available. As well, there is the concept of affiliated packages. These are packages that are basically built on top of the core functionality provided by astropy. While they aren't part of astropy, they are being built up into a community driven environment for doing astrophysics. It is definitely worth your while taking a look at the extended world of packages that are available to you.
