Elmer for PDEs

Elmer is an Open Source multiphysics simulation software that has been around since 1995. It is developed by the CSC â€” IT Center for Science Ltd. This group is administered by the Ministry of Education, Science and Culture in Finland. With Elmer, you can model such physical systems as fluid dynamics, electromagnetism, heat transfer and acoustics. All of these problem areas have one thing in common, they are all described by partial differential equations. 

I guess we should start with, "What is a PDE (partial differential equation)?". A PDE is a differential equation that depends on more than one variable, usually more than one space variable. As an example, an equation that describes how heat gets transfered across a metal plate would look like
   d/dt(u) = a (d^2/dx^2(u) + d^2/dy^2(u))
where a is the thermal diffusivity of the metal plate. There are exact solutions for very simple PDEs, but anything more complex that describes more physical situations just can't be solved exactly. This is where numerical solutions come into play. There are three widely used methods: finite element, finite volume and finite difference methods. Elmer uses the finite element method. The basic idea is to break up the problem space into some kind of a mesh of smaller spaces, and then either eliminate the PDE completely by reworking it into a steady state problem on the mesh, or approximating the PDE with a system of ordinary differential equations which are then integrated using standard methods like Euler's method or Runge-Kutta.

Elmer is distributed under the GPL, so you can always download the source and compile your very own version. There are binaries available for all of those poor users still stuck on Windows. For most Linux distributions, there should be packages available. For Ubuntu based distros, you can simply use
   sudo apt-get install elmer
which will install elmer and all of the libraries that you need along with it. Elmer is broken into several parts. The ElmerSolver is the part which actually takes the input files does the calculations to evolve the PDE that you are interested in. The ElmerPost part is the visualization and post processing tool. With this tool, you can actually see the results of your calculations. ElmerGrid is the meshing tool that can create simple 1D, 2D and 3D meshes that will be used to evolve your PDE. It can also be used to import meshes generated using other software packages, such as those created using the Ansys tools. There is also a GUI interface called ElmerGUI. ElmerGUI allows you to define and generate input files for ElmerSolver, as well as importing external meshes from other software. [elmer_gui_1.png]

Looking at all of this, you may be thinking "This is perfect!" It would not be right to not mention some of the downsides to Elmer. Since Elmer is actually a suite of tools, they are not always at the same development level. The documentation tends to lag behind the newest features, and ElmerGUI may be missing some of the more esoteric methods and models which ElmerSolver can use. Elmer is a huge system, and like any large software package it has a steep learning curve. The tools available (ElmerGrid) can only handle generating relatively simple meshes. This means that if you have a very complicated system, you will likely need to use some other tool to actually generate the mesh and then import it into Elmer. If you can work around these possible deficiencies, then Elmer may be exactly the right solution for you.

ElmerGUI is likely to be what most people are interested in using. You can import element mesh files in various formats, generate element partitionings for geometry input files, setup the PDE systems you want to solve, and export model data to hand into ElmerSolver. Most conveniently, ElmerGui also provides an interface to the parallel version of the solver, ElmerSolver.mpi. There is also a built-in post processor that allows you to view your results right there from ElmerGUI. The menus in ElmerGUI are fully programmable, as well. This means that you can tune the interface to better match your specific problem area.

There is a very good tutorial available from the main Elmer web site. Along with the tutorial documentation, there are sample files available for each of the cases. These can be great starting points for your own calculations, and help you as you are learning the system. As an example, let's look at the sample "Computation of fringe capacitance". Once you have downloaded the sample files and unpacked them, you can load the project by using "File -> Load Project..." from the menu. Once it is loaded, all of the input data is also loaded. A project is simply a directory containing all of the files required to do a computation. The actual mesh is defined by the files "mesh.header", "mesh.nodes", "mesh.elements", and "mesh.boundary". The current settings and state are stored in the file "egproject.xml". There is also a solver input file called "case.sif" that gets handed in to ElmerSolver when you are ready to actually do your calculations. You can edit this file with "Sif -> Edit...". [elmer_gui_2.png]. You can edit the model details (like physical constants) by using "Model -> Setup...". When you are ready to run your calculation, you can use "Run -> Start Solver". This will open up a log window, showing its progress and a convergence monitor showing how quickly Elmer is converging on the results. [elmer_gui_3.png] This will create a new file, named "case.ep", in your project directory containing the results of your calculation. You can then view it using either "Run -> Start Postprocessor" or "Run -> Postprocessor (VTK) ...". [elmer_gui_4.png]. As you can see, there are lots of tools available in helping you visualize the results of your calculation.

So now that you have seen a basic example of running one of the tutorials, what else can Elmer do for you? The solver can handle solving linear systems. It can do this by using direct methods, through the LAPACK library for example. You can use a set of Krylov subspace methods to do iterative solutions. In order to get rapid convergence, though, you usually need to use some form of preconditioning. There are a class of iterative methods called multilevel methods that are used for large linear systems. Elmer provides 2 options, geometric multigrid and algebraic multigrid.

More complex, and hence more physically accurate, problems tend to be nonlinear. This nonlinearity may be as simple as what you see in the full equation for pendulum motion, to the Naviers-Stokes equations for fluid flow to the equations of General Relativity. Elmer deals with nonlinear systems by first linearizing the equations at each iteration step. How the equations are linearized depends on exactly which solver method is being used. For example, the Navier-Stokes solver can use either the Picard linearization or the Newton linearization.

There are methods for solving time-dependent systems. First order time derivatives can be discretized using either the Crank-Nicolson method or the Backward Differences Formulae. You can also solve eigenvalue problems with Elmer. These tend to crop in structural analysis problems, including factors like elasticity and damping.

For really large problems, you will likely want to look into running your computation in parallel. Elmer uses MPI as the parallelization technique, along with domain decomposition as the method of dividing up the work. The first step is to take the mesh and subdivide it into chunks, or partitions, which, depending on the actual calculation to perform, will divide up the load evenly across all of the CPUs. These chunks are then sent out to individual CPUs and the calculations done. At the end of the run, the results are then combined back into a single result. Because of the work involved in partitioning, etc., most users will likely take advantage of the parallelization tool in ElmerGUI.

The last selling point of Elmer is its modular nature. The solver is written in FORTRAN 90. This means that if you wanted to add your own user functions, or a complete solver, it is simply a matter of writing a FORTRAN module and including it in Elmer. There is good documentation on the main Elmer site covering the steps involved. Hopefully, this introduction has given you some idea of what you can do with Elmer. If you are studying multi-physics problems, Elmer is probably a very good tool to learn. It might be a good tool to introduce in a numerical physics course, since you can model so much. If you do use it in your research or studies, I would love to hear about it.


Links
http://www.csc.fi/english/pages/elmer - Main web site
http://www.elmerfem.org/ - User forum, wiki and other resources

