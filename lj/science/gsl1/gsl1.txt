Science the GNU Way - Part 1

Over the last several issues, we have looked at several packages to do all kinds of science. But sometimes, there just isn't a tool to solve your particular problem. That's the great thing about science. There is always something new to discover and study. But this means that it's up to you to develop the software tools you'll need to do your analysis. Over the next couple of issues, we'll look at the GNU Scientific Library, or GSL. This library is the Swiss Army library of routines that you will find useful in your work.

The first thing to do is to get a copy of GSL and get it installed on your system. Since it is part of the GNU project, it is hosted at http://www.gnu.org/s/gsl/. You can always download and build from the source code, but all major distributions should have packages available. For example, on Debian based systems, you would need to install the package libgsl0-dev to develop your code with and gsl-bin to run that code. GSL is meant for C and C++, so you will also need a compiler. Most of you probably already know and use GCC, so we will stick with that.

The next step is actually the last step. We'll look at compiling now so that we can focus on all of the tools available in GSL. All of the header files for GSL are stored in a subdirectory named "gsl". So, for example, if you wanted to include the math header file you would use 
   #include <gsl/gsl_math.h>
All of the functions are stored in a single library file called "libgsl.a" or "libgsl.so". You also need a library to handle basic linear algebra. GSL provides one (in the file "libgslcblas.so"), but you can use your own. You will also need to link in the math library. So the final compile and link command should look like
   gcc -o hello_world hello_world.c -lgsl -lgslcblas -lm
There are optional inline versions for some of the performance-critical functions in GSL. To use these, you will need to include "-DHAVE_INLINE" to your compile command. To try and help with portability issues, GSL offers some functions that only exist on certain platforms, but not others. As an example, the BSD math library has a function called "hypot". GSL offers it's own version, called "gsl_hypot", that you can use on non-BSD platforms. For some functions, there are both a general algorithm as well as optimized versions for specific platforms. This way, if you are running on a SPARC for example, you can select a version optimized for SPARC if it exists.

One of the first things you will likely want to do is be able to check on whether you are getting correct results out of your code or if there were errors. GSL has a number of functions and data structures available in the header file "gsl_errno.h". Functions return a value of zero if everything is fine. If there were any problems in trying to complete the requested action, a non-zero value is returned. This could be an actual error condition, like a wrong data type or a memory error, or it could be a condition like not being able to converge to within the requested accuracy in the function call. This is why you need to always check the return value for all GSL function calls. The actual values returned in an error condition are error codes, defined in the file "gsl_errno.h". They are defined as macros that start with "GSL_". Examples include
   GSL_EDOM - Domain error, used by functions when an argument doesn't fall into the domain over which the function is defined.
   GSL_ERANGE - Range error, either an overflow or underflow.
   GSL_ENOMEM - No memory available.
The library will only use values up to 1024. Values above this are availble for use in your own code. There are also string versions of these error codes available. You can translate the error code to its text value with the function "gsl_errno()".

Now that you know how to compile your program and what to do with errors, we can start looking at what kind of work you can do with GSL. Basic mathematical functions are defined in the file "gsl_math.h". The set of mathematical constants from the BSD math library are provided by this part of GSL. All of the constants start with "M_". Some of them are
   M_PI - Pi
   M_SQRT2 - the square root of 2
   M_EULER - Euler's constant
There are also capabilities with dealing with infinities and non-numbers. Three macros define the values themselves
   GSL_POSINF - positive infinity
   GSL_NEGINF - negative infinity
   GSL_NAN - not a number
There are also functions to test variables. These are
   gsl_isnan - is it not-a-number?
   gsl_isinf - is it infinite?
   gsl_finite - is it finite?
There is a macro to find the sign of a number. "GSL_SIGN(x)" returns the sign of x, 1 if it is positive and -1 if it is negative. If you are interested in seeing if a number is even or odd, there are two macros defined: "GSL_IS_ODD(x)" and "GSL_IS_EVEN(x)". These return 1 if the condition is true and 0 if it is not.

There are a series of elementary functions that are part of the BSD math library. GSL provides versions of these for platforms that don't have native versions. These include items like
   gsl_hypot - calculate hypotenuse
   gsl_asinh, gsl_acosh, gsl_atanh - the arc hyperbolic trig functions
If you are calculating the power of a number, you would use "gsl_pow_int(x,n)", which would give you x to the power of n. There are specific versions for powers less than 10. So if you wanted to find the cube of a number, you would use "gsl_pow_3". These are very efficient and highly optimized. You can even inline these specialized functions when HAVE_INLINE is defined. There are several macros defined to help you find the maximum or minimum of numbers, based on data type. The basic "GSL_MAX(a,b)" and "GSL_MIN(a,b)" simply return either the maximum or minimum of the two numbers a and b. "GSL_MAX_DBL" and "GSL_MIN_DBL" find the maximum and minimum of two doubles using an inline function. "GSL_MAX_INT" and "GSL_MIN_INT" do the same for integer arguments. When you do any kind of numerical calculation on a computer, there are always errors introduced by round-off and truncation. This because we can't exactly reproduce numbers on a finite binary system. But what if you want to compare two numbers and see if they are approximately the same? GSL provides the function "gsl_fcmp(x,y,epsilon)". This function compares the two doubles x and y, and checks to see if they are within epsilon of each other. If they lie within this range, the function returns 0. If x < y, it returns -1, and it reurns 1 if x > y.

In many scientific areas complex numbers are used. Within GSL, complex data types are defined in the header file "gsl_complex.h" and relevant functions are defined in "gsl_complex_math.h". To store complex numbers, the data type "gsl_complex" is defined. This is a struct that stores the two portions. You can set the values with the functions "gsl_complex_rect(x,y)" or gsl_complex_polar(x,y)". In the first, this represents "x+iy", whereas in the second x is the radius and y is the angle in a polar representation. You can pull out the real and imaginary parts of a complex number with the macros "GSL_REAL" and "GSL_IMAG". There is a function available to find the absolute value of a complex number, "gsl_complex_abs(x)", where x is a of type gsl_complex. Because complex numbers are actually built up of two parts, even basic arithmetic is not simple. To do basic math, you can use
   gsl_complex_add(a,b)
   gsl_complex_sub(a,b)
   gsl_complex_mul(a,b)
   gsl_complex_div(a,b)
You can calculate the conjugate with "gsl_complex_conjugate(a)" and the inverse with "gsl_complex_inverse(a)". There are functions for basic mathematical functions. To calculate the square root, you would use "gsl_complex_sqrt(x)". To calculate the logarithm, you would use "gsl_complex_log(x)". There are several others available, too. There are trigonometric functions provided, like "gsl_complex_sin(x)". There are also functions for hyperbolic trigonometric functions, along with the relevant inverse functions.

Now that we have the basics down, next month we'll look at all of the actual scientific calculations that you can do. We'll look at statistics, linear algebra, random numbers and many other topics. Hope to see you here again next month.
