Pythonic Science in the Browser


In the past, if you wanted a friendly environment for doing Python programming, you would use Ipython. The Ipython project actually consisted of three parts, the standard console interface, a Qt-based GUI interface, and a web server interface that you can connect to with a web browser. The web browser interface, especially, has become the de-facto way of doing scientific programming with Python. It has become so popular that it has spun off as its own project, named jupyter. This month, we will take a look at how to get the latest version up and running, and what kinds of things you can do with it once it is setup.

The first step is to get the latest version installed. Because it is under very active development, you probably will want to keep it updated on your system. Pip is definitely the easiest way to do this. The following command will either install jupyter, if it isn't already installed, or it will update jupyter to the latest version.
   sudo pip install --upgrade jupyter
You will want to be sure that you have a C compiler installed, along with the development package for Python. For example, on Debian-based systems, you can be sure you are ready with the following command
   sudo apt-get install python-dev build-essentials
This should have everything you need installed. To start jupyter up, you can open up a terminal window and enter the command
   jupyter notebook --no-browser
This will start a web server, listening on port 8888, that will accept connections from the local machine. For security reasons, by default, it will ignore incoming connections from outside machines. If you want to set it up to accept connections from outside machines, you can do so by adding the extra option
   jupyter notebook --no-browser --ip=*
This opens up your jupyter server wide open, so it is strongly discouraged unless you are on a secure private network. Otherwise, you should have sort of user authentication set up to manage who can use your system.

Once jupyter is up and running, you can open a browser and point it to http://localhost:8888. [jupyter1.png] Across the top, you will see a series of tabs for each section of the workspace. Most people will only see three: Files, Running and Clusters. If you are using the Anaconda Python distribution, then you will get a fourth tab: Conda. On startup, you will be located at the first tab, Files. This is simply a directory listing of the current working directory. You probably won't have any notebooks currently available, so you will need to create a new one. You can do this by clicking the drop down on the right hand side of the screen labeled 'New', and selecting the Python notebook entry on the menu. This will open a new browser tab and load an new empty notebook. [jupyter2.png] We'll look at what we can do after looking at the rest of the tabs. The second tab shows you all of the active notebooks running on this particular server. [jupyter3.png] You can click the related link to open the selected notebook in a new browser tab, or click the 'Shutdown' button to halt the selected notebook. There is also a section for any active terminal sessions. The clusters section gives you status information on the parallel Python engines that are configured on your system. By default, this isn't configured at all. If you are using Anaconda, you will get a fourth section labeled as conda. [jupyter4.png] This section gives you details about what packages are available and what packages are installed. You can even manage your conda environments, creating new ones, exporting existing ones or deleting environments that you are done with.

Let's take a look at what you can do with the notebook itself. The interface should feel familiar to people who have used applications like Maple or Mathematica. Your input is entered in sections called cells. Cells can be of different types, namely code, markdown text or headings. This way, you can have text cells describing the code sections, explaining what it is doing and why. This is extremely useful when you are doing scientific calculations. It allows you to include your documentation with your code, so that everything can stay synchronized and up-to-date. When you start entering lines of code, hitting enter takes you to a new line within the same cell. None of the code gets executed, yet. When you are ready to run the cell, you can type in the shift and enter keys together. [jupyter5.png] All of the code runs within the same Python engine, so results from one cell will be available to other cells later on. You can also import extra Python modules, just like you do in any other Python environment. The most useful for visualizing data and results is matplotlib. If you import the matplotlib module and execute plotting commands, jupyter can render the resulting graphs directly in the notebook. [jupyter6.png] As you can see, you need to use an extra statement that starts with a '%' character to tell jupyter to render the plot as an image within the notebook. Otherwise, the plots will get render within a new window. This new statement is called a magic. There are an entire library of magics available. For example, you can use the timeit magic to profile how long it takes to run the code within a cell. [jupyter7.png] If it is a section of code that has a short runtime, jupyter will automatically run it several times to get an average runtime. This allows you to work on optimizing your code, as well as developing it.

When you are ready to share your results, you have several different options available. You can always just share the jupyter notebook. It is all stored in a single file with the filename ending '.ipynb'. The other options available depend a bit on which Python modules you have installed on your system. The formats most often used are either as a single static HTML page, or as a PDF document. If you are going to present your results, you can even export it as an HTML-based presentation where the cells are formatted as individual slides. All of these options are available under the menu item 'File->Download As'.

Hopefully you've seen some functionality that you can make use of in your own code. Jupyter is especially useful for scientific exploration. You can try lots of different calculations and do different types of data analysis and see the results right away within the notebook. And when you reach a useful conclusion, you can share the notebook with others within the growing community of jupyter users.



IMAGES
jupyter1.png  -  When you first enter jupyter, you are presented with a file listing from the current working directory.
jupyter2.png  -  Clicking on the 'New' tab will load a new, empty, notebook within a new browser tab.
jupyter3.png  -  You can get a listing of all of the active notebooks and terminal sessions.
jupyter4.png  -  Jupyter can let you check the details of your Anaconda packages and environments.
jupyter5.png  -  You get the output from your Python code displayed within the notebook..
jupyter6.png  -  Jupyter can render matplotlib graphs directly in the notebook.
jupyter7.png  -  There are several magic statements available, such as the timeit magic to find runtimes of code cells.
