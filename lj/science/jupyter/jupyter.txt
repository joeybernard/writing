Scientific Coding - Python



Over the next couple of issues, we will look at some options that are available when you need to do very specific types of scientific research. There are times when none of the available software packages are quite what you need to solve your problem. In these cases, you will need to write some custom code to get your work done. This month, we will look at setting up and using jupyter. Next month, we will look at using rust.

Python has become the de facto language for data science, as well as scientific programming in general. Jupyter provides a very comfortable environment where you can do interactive and exploratory work. While most distribution package systems probably have jupyter available, it is not likely that it will be the most recent version. Also, it becomes difficult to share your configuration with other researchers if they don't run the same distribution that you do. Because of this, this article will start by assuming that you only have Python and pip installed. Everything else will be managed using only these two tools. The first step is to create a virtual environment to do all of your work in. In this example, I will be using ".env" as the subdirectory where the virtual environment will be stored. Assuming this, you can create a basic virtual environment with the following command:
   python3 -m venv ./.env
This command will create a new directory, where a copy of the python and pip programs are placed. There will also be a number of support scripts installed to help manage the virtual environment.

You can initialize your new virtual environment by sourcing the following script.
   . ./.env/bin/activate
This script sets a number of environment variables, and also sets the prompt for bash. This new prompt helps remind you that you are in a virtual environment. At this point, anything you do will only apply within this virtual environment. You can now install jupyter with the command:
   pip install jupyter
This not only installs the Python modules and dependencies needed for jupyter, but it also installs a number of support scripts. There are several ways to start up jupyter. By default, it will try and start up a browser in order to load the main dashboard interface. You may want to start up jupyter in a headless mode, however. Also, jupyter by default only listens to connections from the local machine. In this case, the following command starts up jupyter without a browser and tells it to listen to all network connections:
   jupyter-notebook --no-browser --ip='*'
This way, you can start jupyter on a machine and then connect to it from another location on your network.

Once the jupyter server has finished starting up, you will see some output that includes a link that you will need to copy and paste into your browser. This will get you to the main interface for jupyter. [jupyter1.png] To create a new notebook, you can click on the "New" button in the top right-hand side of the window and selecting "Python 3". This will pop up a new browser tab with a new, untitled notebook. You can rename the notebook by either clicking on the notebook name at the top of the window, or by clicking the menu item "File->Rename...". As you start writing code, your work will be automatically saved after a short while. This is good, but you may want a bit more control over saving. Clicking the menu item "File->Save and Checkpoint" will save your current notebook state, and also mark it as a checkpoint. This allows you to revert back to previous checkpoints in your flow of development.

The notebook is organized into blocks that can be thought of as self-contained pieces. The default type of block is a code block. This means that whatever you type into the block will get interpreted as Python code. You can change a given block by clicking the type drop down and select from Markdown, Raw NBConvert or Heading. [jupyter2.png] Each block can contain a rather arbitrary amount of content. For example, you could write several lines of code to do a looping chunk of code to square the first 1000 numbers with the following code.
   a = list()
   for i in range(1000):
      a.append(i*i)
   print(a)
When you are typing this code into a code block, hitting the enter key takes you to a new line. When you are ready to execute the entire code block, you can hit shift-enter and your output will be displayed below the code block. [jupyter3.png] As you develop more complicated code blocks, you may need to start worrying about performance. This is where you can use special statements, called magics, within the code blocks. Magics start with either one or two '%' characters. If the magic sets a state, or only applies to the next statement, it will start with a single '%' character. If the magic applies to the entire code block, it will begin with two '%' characters. To get an overall run time for a code block, you can add
   %%time
to the top of the code block. In my case, I removed the print function to clean up the output and I got 163us. If you run this same block multiple times, you will likely get several different values. You can take this into account by using the magic "%%timeit" instead of "%%time". This magic will run your code block multiple times to try and get an average value. In my case, I got the following output
   95.8 µs ± 6.41 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
There are several other magic statements that can let you dig into your code's behavior.

When you are done, you will likely want to share your work with others. In this case, clicking on the menu item "File->Download As" gives you a set of options on how you can output your work. You can output it in a "read-only" format, like PDF or HTML. You can also output it in a workable format, like jupyter notebooks or Python scripts. These formats allow others to continue to build upon your work. You can then close down your notebook by clicking on the menu item "File->Close and Halt". This way, you are sure that your work has been completely saved to the hard drive. After you have closed your browser, don't forget to shutdown the jupyter server. You can do this by going to the console window where you started jupyter and entering "Ctrl-C". It will ask you if you are sure, and typing "Y" will finalize the shutdown process. You can get a list of the Python modules in your current virtual environment with the following command:
   pip freeze >>requirements.txt
This way, you can easily reconstruct your virtual environment by using the command
   pip install -r requirements.txt
When you are completely done, you can deactivate your virtual environment by running the command "deactivate". Hopefully, this article will spark you into checking jupyter out as the workspace to use in your Python coding.   



IMAGES
jupyter1.png  -  Jupyter shows you all of the files in the current directory, and allows you to create new notebook files.
jupyter2.png  -  You can use the various block formats to do literate programming.
jupyter3.png  -  Your code is executed one block at a time.
