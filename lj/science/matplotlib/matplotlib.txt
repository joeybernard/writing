Scientific Graphing in Python


In the last few issues, we have looked at several different Python modules useful when you are doing computations. But, what tools are available to help you analyze the results from these computations? While you could do some statistical anaylsis, sometimes the best tool is a graphical representation of the results. The human mind is extremely good at spotting patterns and seeing trends in visual information. To this end, the standard Python module to do this type of work is matplotlib. With matplotlib, you can create very complex graphics of your data to help you discover relations. While you can always install matplotlib from source, it is always easier to install it from the package manager of your distribution. For example, in Debian based distributions, you would install it with
   sudo apt-get install python-matplotlib
The python-matplotlib-doc package also includes extra documentation for matplotlib.

Like other large Python modules, matplotlib is broken down into several sub-modules. The first one we'll look at is pyplot. This sub-module contains most of the functions that you will want to use to graph your data. Because of the long names involved, you will likely want to import it as something shorter. In the examples below, we will be using
   import matplotlib.pyplot as plt
The underlying design of matplotlib is modelled on the graphics module for the R statistical software package. Thegraphical functions are broken down into two broad categories, high level functions and low level functions. These functions don't work directly with your screen. All of the graphics generation and manipulation happens via an abstract graphical display device.



URLs
http://matplotlib.org

