Solving ODE's on Linux



Many problems in science and engineering are modelled through ordinary differential equations (ODE's). An ODE is an equation that contains a function of one independent variable and its derivatives. This means that practically any system that changes over time can be modelled with an ODE, from celestial mechanics to chemistry reaction rates to ecology and population modelling. Because of this ubiquity, many tools have been developed over the years to help solve and analyze ODE's. This month, we will be looking at one of the tools available on Linux, Model Builder. The project is hosted on Source Forge, so you can always build it from source. But, most distributions should have a package available. On Debian-based ones, you can install it with the command
   sudo apt-get install model-builder
It will also install several Python modules to support the tasks it can handle. If you do decide to build from source, you will need to handle these dependencies yourself. Included with the source is a directory of examples. You can use these to get a starting point and get some ideas of what you can do with Model Builder. Documentation is a little sparse, so you may need to get your hands a little dirty to take the biggest advantage of what is possible with Model Builder.

To start Model Builder, you can either click on its menu item in your desktop environment or you can run the command 'PyMB' from a terminal window. When the main window pops up, you are presented with a template where you can define the problem you are analyzing. [mb1.png] The main pane, titled 'Differential Equations', is where you can define the set of ordinary differential equations that you are trying to solve. The general form of these equations is
   dy/dt = f(y,t)
If your system depends on different levels of differentiating the dependent variable, you can always rewrite it as a system of ODE's. When you give Model Builder your system, you only need to write out the right-hand side of the above equation. This equation can contain essentially any function or expression that numpy understands, since Model Builder uses Python to do the heavy lifting. Since Model Builder is designed to handle systems of equations, you need to define the y portion as elements of a list. So the y variable for the first equation is labelled as y[0], the y variable for the second equation is labelled y[1], and so on. These are called the state variables. The pane to the right of the equation window is where you can place any parameters that you need, one per line. They can be used in the equation window, where they are labelled as p[0], p[1], etc. If you want to use time in either the parameters or equations that you have defined, you just need to use the variable 't'. Since Python is used in the back-end, you can even use lambda functions to define more complex structures. You may want to take a look at the documentation available on the numpy site to see what options are available.

Below these two panes is where you define the rest of the options for your problem. In the 'Initial values' box, you can enter the initial values for each state variable at the time t=0. They need to be separated with a space, and put in the order of the equations given in the equation pane. Below the Initial values, you can enter the start time, the end time and the time step to use in the solution. The critical time steps box is usually left empty, so we will leave it alone here. The first step box is the size of the first step. Usually you should leave this as 0 to allow for automatic determination. The minimum and maximum step size boxes set these variables that are used in the variable step size algorithm. Usually, you should leave these as 0, too, to allow for automatic determination. The full output checkbox will print out more useful information about the integration in the results spreadsheet. Once everything is entered, all you need to do is click the 'Start' icon and the integration will be calculated. If this is a system that you will want to work with over time, you can click on the menu item 'File->Save' to save the model to a file. This file format is an XML file, so you could edit it with a text editor if you wanted to. When you are ready to do more work with it, you can load it by clicking on the menu item 'File->Open'.

Once the calculations are done, which may be fast for simple problems, a results window will pop up. [mb2.png] This graph window is handled by matplotlib, so you can manipulate it just like any other matplotlib window. This includes panning, zooming or changing the plot window. You can also save the resulting plot as an image file in one of several different formats. Going back to the main window, there are some other tools available. Clicking on the 'Show equations' icon will pop up a window where you can see the equations typeset. [mb3.png] Beside this icon is the 'Results' icon. Clicking on this will pop up a spreadsheet of all of the results from your integration. [mb4.png] The columns of data include the time, the value of y[0], and the step sizes, among others. You can select a couple of columns by holding down the control button and clicking on the column headers and then click on the plot button to plot them in a new window. You can get a power spectrum for any one column by selecting the one of interest and clicking on the 'Spectrum' icon. This will pop up two new windows, the first a power spectrum of the column [mb5.png] and the second a spectrogram of the column [mb6.png]. The last tool available is a wavelet transform. When you select a column, you can apply a continuous wavelet transform to the data. When you are done with Model Builder, you can save this data off into a comma separated values (CSV) file from the spreadsheet window. You can then import it into other tools, like R, to do even further analysis.

Now that you have seen the options available in Model Builder, hopefully you will consider it when looking at ODE problems. It provides a pretty simple interface to the tools available in Python to numerically solve ODE's. While there are other more powerful tools available, Model Builder fits into the niche of experimenting quickly with different equations and playing with ideas. Consider it another tool in your quiver in doing scientific calculations.



URLs
ODE Wikipedia article - http://en.wikipedia.org/wiki/Ordinary_differential_equation
Model Builder main site - http://model-builder.sourceforge.net
NumPy site - http://www.numpy.org



Images
mb1.png - When Model Builder starts up, you have the ability to set several parameters and the equations you wish to analyze.
mb2.png - Once you finish defining the problem and run the integration, a result window will pop up with a graph of the integration.
mb3.png - You can always get a typeset display of you equations to verify what they should look like.
mb4.png - You can pull up all of the results of your integration and do further analysis.
mb5.png - You can generate a power spectrum of any column of your results.
mb6.png - You can also generate a spectrogram of your results.
