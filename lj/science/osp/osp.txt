Open Source Physics on Linux

Over the last several months we've looked at lots of software to do research in the sciences. But one important area that has not been covered in detail are the resources available to teach the next generation of computational scientists. To fill this gap, you can use the code provided through the Open Source Physics project. This project is supported by the American Association of Physics Teachers (AAPT) and the National Science Foundation (NSF), and provides several different packages to do simulations and analysis.

The first thing that Open Source Physics provides is an entire suite of Java applications that do simulations of different physical systems. These simulations are all written in Java, so they can be run on operating systems other than Linux. The categories covered include astronomy, electricity and magnetism, classical mechanics, quantum mechanics, optics and relativity. On the main web site, you can either do a specific search or browse by topic to find simulations. The simulation programs are packaged as jar files, so you can just download them and run them by typing
   java -jar filename.jar
[img1]This lets you run the simulation on your desktop. But these are Java programs, so you can include them in a web site and run them within a browser. This means that you can include them in your science web site to be able show visitors simulations of the systems you might be trying to explain.

Some of the simulations provided by Open Source Physics have parameters that you can alter to change the runtime details of the simulation. [img2]These parameters might be items like masses, velocities or field strengths. If the simulation you are using does have settable parameters, then there will bne an option to save the model details off to a data file. You can do this by clicking "File -> Save Model...". The data file is an XML file, so it should be relatively clear if you wanted to edit the file directly with a text editor. You can then reload these parameters in the simulation by clicking on "File -> Load Module...". This way, you can share models you've developed with other people by sharing the XML data file.

Once you have developed beyond the material covered by the pre-packaged simulations, you will probably want to see what other systems you can model and analyze. Open Source Physics provides a system call Easy Java Simulations (EJS) to do just that. This Java program provides a nice and easy interface to allow for prototyping, testing and distributing of your own simulations. EJS is good in educational situations because it allows for relatively complex simulations without needing to know a great deal about programming. EJS is larger than the single simulations we looked at above, so you need to download a zip file rather than just a single jar file. Once you have the zip file downloaded, you will need to unpack it on your machine. You can then navigate to the directory you unpacked it into and execute
   java -jar EjsConsole.jar
[img3]This pops up a console window where you can set some initialization parameters and start one or more EJS instances. This will open up a modelling and authoring tool where you can define your physical system, and the details of what you are trying to model. You can run these models from within the authoring tool, so you can try things out and see whether you are getting the results you expect. Once you are happy with the simulation, the authoring tool has options to allow you to package the entire simulation as a single bundle that you can then share with others. This is great when you are developing code for a class, since you can define simulations for the exact physical systems you want to teach and then package it for your students.

Open Source Physics aims to help with all aspects of teaching, so to this end it provides a program called the "Launcher". [img4]The "Launcher" is a central program that provides access to a series of simulations, along with supporting documentation and teaching notes. You can click on the curriculum link and search for collections that cover specific topics. Just like with the individual simulations, you can either search for a specific item or browse a list of topics for which there are already curriculum launchers prepared. You are not limited to these, however. You can use the LaunchBuilder to create your own collections. This utility lets you define the materials that you wish to bundle together, and then will output a jar file that you can then distribute. The actual material list is stored as an XML file, so you can open it up with a text editor if you wish to refine any of the entries before actually generating the distributable file.

When you are ready to go even further, the Open Source Physics project has an entire programming environment available based around the Eclipse IDE. This IDE includes the Open Source Physics libraries that are used in the simulations and the EJS codes. This way, you can go further and develop your own programs without having to re-invent the wheel when it comes to common tasks. There is a lot of documentation available, including several chapters of two upcoming books named "Open Source Physics: A User's Guide with Examples" and "An Introductiuon to Computer Simulation Methods". 

There are two other tools that the Open Source Physics project provide: Data Tool and Tracker. First, we will look at Data Tool. Data Tool provides plotting and data fitting functions to help you analyze experimental data. You can change the appearance of plots interactively by selecting parameters on the main screen. Once your data is loaded, Data Tool can also do basic statistics on the data set. So you can quickly get items like the mean, median and standard deviation. With you data plotted, you can get the slope and area under curves in the plot. Often, you collect data to try and demonstrate some relationship between inputs and outputs. To verify this, you try and fit some function to your data. Data Tool provides a number of pre-defined functions that you can ask it to try and fit. Or you can use Fit Builder to define your own functions to be used in the fitting routine. You may also find that you need massage your data before either plotting it or trying to fit it. This may involve different types of mathematical transformations being applied to your data. In regular data analysis, this would be a step that you handle before importing your data, but Data Tool provides a function called Data Builder that allows you to do this right here.

The last tool we'll look at is Tracker. [img5]Tracker can do image and video analysis by using the functionality in the Open Source Physics library. Tracker is capable of object tracking in video, giving you position, velocity and acceleration. It can provide overlays and graphs, special effects filters multiple reference frames, and calibration points. It can even be used to analyze spectra and interference patterns, allowing you to analyze laboratory measurements. As an example, you can overlay simple dyanmic particle models on top of a video clip. This allows you simply take a video of an experiment, and then use it to make your measurements and analyses. There are several examples on the web where people have used this to model all kinds of events, including modeling the physics of Angry Birds. A quick Google search will open your eyes to what is possible.

This short article just scratched the surface of what is available. If you are either teaching physics, or learning physics, the Open Source Physics project is definitely worth your time. Look into what you might be able to use to make learning even more interesting.

URLs
http://www.compadre.org/osp/

Images
img1 - osp1.png - For example, starting up the simulation of sliding down an inclined plane also pops up some introductory material.
img2 - osp2.png - Saving a run for sharing with other people.
img3 - osp3.png - The EJS console lets you define your own simulations.
img4 - osp4.png - The Data Tool helps do basic statistics on your data.
img5 - osp5.png - The tracker handles video analysis with object tracking.
