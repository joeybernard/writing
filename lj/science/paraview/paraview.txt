Visualizing Science


This month, I thought that we could look at one of the more popular tools used for visualizing data within several scientific disciplines - paraview. Paraview started as a joint project between Kitware Inc. and Los Alamos National Laboratory back in 2000. The first public release was version 0.6, which came out in 2002. Since then, paraview has become one of the most popular visualization packages when trying to visualize large data sets. Since it is open source, it should be available in most, if not all, package repository systems. For example, in Debian-based distributions, you should be able to install it with the command
   sudo apt-get install paraview
Starting it up the first time should give you an empty workspace, ready for you to start working. [paraview1.png]

The bulk of the window is populated by two major parts. The right-hand side is the main display pane where the visualization will appear. The left-hand pane shows the list of objects being visualized, along with their properties. Along the top, there is a toolbar of the common functions in paraview. In order to play with paraview, you will need some data. If you don't have any data of your own that you can use, you can grab some data provided as part of the paraview tutorial (https://www.paraview.org/Wiki/The_ParaView_Tutorial). There is also more documentation and sample scripts available there. We'll assume that you are going to use the sample data as you learn how to use paraview. To load the data, click on the menu item "File->Open..." and navigate to where you unpacked the sample data. While you are here, you can take a quick look at the list of all of the file types paraview supports. For example, you can load the data stored in the file 'can.ex2'. You won't see anything displayed right away. In the bottom part of the left-hand side pane, you should see the properties for the newly loaded data file. For now, you can just accept the defaults and click on the apply button. You should then see the data visualized in the main pane. [paraview2.png] Clicking and dragging on the image allows you to rotate the view, to see the entire object from various angles. Along with visualizing data, paraview includes a number of basic shapes that can be used to build up structures within your visualization. Clicking on the menu item "Sources" gives you a fairly lengthy drop down of structures. You can even add more complicated structures, like the Mandelbrot set, to your visualization. [paraview3.png] This could be handy if you have some basic geometric structure, or an image, that you want to use as a backdrop to your data visualization.

If the data that you are visualizing is more traditional (i.e. the data comes from measurements), paraview provides actual data analysis tools to complement the visualization tools. For example, clicking on the menu item "Filters->Statistics" gives you a drop down list of statistical functions. Clicking on the "Descriptive Statistics" option gives you a new entry in the "Pipeline Browser" where you can set the options for the statistical analysis. [paraview4.png] This opens up a new pane where you can play with the data a bit more directly. This particular data set is not very interesting, so descriptive statistics are not very useful in this specific case. You can also do more detailed data analysis by clicking on the menu item "Filters->Data Analysis". For example, clicking on the histogram entry gives you a new pane where a histogram plot is displayed. [paraview7.png] You could also do things like calculate quartiles, or replot interpolated and analyzed data.

For repeated visualization, you probably don't want to go through all of the steps that were required every time. This is why paraview includes a python engine. This means that you can write a python script that can run repeated processing steps easily. This also means that you can script behaviour that can be processed when the GUI is not active. This comes in handy when you are running larger data analysis jobs on high performance clusters remotely. You can work on your Python scripting by clicking on the menu item "Tools->Python Shell". This pops up a new window where you can write and evaluate your Python code directly within paraview. [paraview5.png] Along with writing python scripts, paraview has been designed with a plugin architecture. Clicking on the menu item "Tools->Manage Plugins..." pops up a new window where you can select which plugins are loaded and active. [paraview6.png]

If you are in the middle of your visualization work, you can save the current state of paraview so that you can pick it up again later. Clicking on the menu item "File->Save State..." lets you save off the current state as a '.pvsm' (paraview state) file. You can reload it later by clicking on the menu item "File->Load State...". Once you finished your visualization, you have a couple of options which allow you you generate files that can be used in other software packages. Clicking on the menu item "File->Save Screenshot.." pops up a new window where you can set options, like the image size. Then, a second window pops up where you can set the image filename. Clicking on the menu item "File->Export Scene..." gives you a second option for saving your results. In this case, you can save your results off in other file formats, such as PostScript or PDF. If your visualization includes an animation, you can save it off by clicking the menu item "File->Save Animation...". Anyone working with large, or complicated, data sets should move to using paraview as their main visualization tool.



URLS
https://www.paraview.org/  -  The paraview home page
https://www.paraview.org/Wiki/The_ParaView_Tutorial  -  Tutorial data, scripts and documentation.



IMAGES
paraview1.png  -  When you first start paraview, you get a new, empty layout to start your visualization.
paraview2.png  -  The data in the sample file 'can.ex2' renders as a half cylinder attached to a rectangle on the end.
paraview3.png  -  You can add lots of different objects to your visualization, even a Mandelbrot set.
paraview4.png  -  You can add statistical analysis to your pipeline of visualization steps in your analysis.
paraview5.png  -  Within paraview, you have access to a python shell where you can directly interact with the paraview analysis tools.
paraview6.png  -  Paraview supports plugins, but it is up to you to select which ones are active and loaded for use in the current session.
paraview7.png  -  You can even do histograms of the data being visualized.
