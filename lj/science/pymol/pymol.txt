Visualizing Molecules with Python

In past issues, we have looked at several open source packages that are available to do computational chemistry. This month, we will look at a very powerful package that is written in Python called PyMOL. PyMOL is a very powerful program, used for visualizing and analyzing chemical structures. While the main project is an open source one, there is a commercial version available that provides support for those who need it. There are several installation options available, but I would actually suggest that you don't install it directly from the downloads available. There are a relatively large number of dependencies that you need to have installed first, which may lead you to dependency hell. If the package manager for your particular distribution includes a package for pymol, it will probably be much easier to use it, especially when you are just learning about how to use PyMOL. As you can probably guess from the name, PyMOL is written in Python. It also uses 3D libraries to handle the actual rendering of the imagery. PyMOL, is also written with a plugin architecture. This means that the feature set of PyMOL can be expanded to handle new analysis workflows.

When you first start PyMOL up, you will get two windows opening up. [pymol1.png] The first window is a console window where you will be able to interact with PyMOL programmatically. The second window is the actual viewer for the results of the visualization and analysis of your chemistry problem. The most basic usage is to use it as a regular viewer of chemical structures. In order to do so, you can click on the menu item "File->Open..." to pop up a dialog window where you can select the file to open. [pymol2.png] PyMOL can handle several dozen different file formats. If you don't have any input files of your own yet, you can get PDB files from the RCSB Protein Data Bank in order to play with PyMOL and learn what you can do with it. When it opens, you will get the default view of the molecule as a stick figure. Within the viewer window, there are three panes. The left-hand pane contains the actual rendered image. On the right-hand side, there are two smaller panes. The bottom half has a description of mouse actions that you can use to manipulate the molecule in the viewer. You can rotate the image, zoom in and out, and control clipping and selection of the objects rendered within the viewing pane. The top half is the object control panel. It contains a list of all of the objects that are being worked with in the current session. Each object in the list has a series of buttons that can apply functions to that object. There is one special entry at the top of the list which affects all of the objects together. The first button, labelled "A", is a set of actions that can be applied to selected objects. These actions include things like using presets for viewing options, or even initiating calculations. [pymol3.png] You can alter several other view options of the display through the action menu. The "S" and "H" buttons give you menus of which elements to show and which elements to hide. The button labelled "L" lets you set what gets labelled within the viewer, and the button labelled "C" lets you play with how colors are used within the rendering. You also have the option of changing the viewing elements directly within the viewing pane by right-clicking in the viewer. When you do, you get a dropdown menu that allows you to change the zoom, the orientation and what objects are visible, among many other options. With so many setting that you can change, you may find yourself in the situation where you can't see the relevant objects anymore, or you may not be able to effectively undo the changes you have made. In these situations, you can right-click on the viewer and select the "Reset" entry to start over again from the beginning.

For more complex interactions, there are a number of wizards available within the menu item "Wizards" to help you coordinate these types of interactions. For example, you could work with density maps by clicking the "Density" option. [pymol4.png] This gives you a set of tools within the right-hand pane where you change settings around the density mapping functionality. There is also a suite of plugins available, which can add extra features to PyMOL. Clicking the menu item "Plugin->Plugin Manager" pops a new window where you can work with these plugins. [pymol5.png] Clicking on the "Install New Plugin" tab gives you a few options of how to install your new plugin. The first option allows you to install directly from a file stored on your local filesystem. The second option is to install a plugin from the PyMOL wiki. You can enter a URL pointing to a plugin described on one of the wiki pages. The third option is to select and install a plugin from one of the available repositories of plugins. When you select one of the repositories from the list, the available plugin list will get populated and you can simply select the plugin you need from that list. While you can also write your own full-fledged plugins, you can add your own customized functionality much more easily by using scripts. PyMOL includes a command language of its own which you can use directly within the console window. These include simple commands, like loading files or saving images, to more complex commands like doing fits between two molecules. Along with these builtin commands, you also have access to a full Python interpreter underneath the hood. This means that you can write Python scripts that work these commands and the objects within your PyMOL session to do even more complex tasks. Once you have your task figured out, you can save off this work within a script file that you can reload later and apply within a different session. The PyMOL wiki also hosts a script library. This would be a good place to look before you start down the road of creating your own script, just in case someone else may have run into the same issue you are working through and they may have found a solution that you can use. If nothing else, you may be able to find a script that can serve as a starting point for your own particular problem.

When you are done working with PyMOL, you many different ways of ending the session. If this is work that you are likely to pick up again and continue with, you can click on the menu item "File->Save Session...". This saves all of the work that you just did, including all of the transitions applied to the view. If the changes you made were actually structural, rather than just superficial changes to the way the molecule looked, you can save these structure changes by selecting the menu item "File->Save Molecule...". This allows you to write out this new molecule to a chemical file format, such as a PDB file. If you want to get output for publications or presentations, you have a few different options available. Clicking on the menu item "File->Save Image As" allows you to select from saving a regular image file in PNG format, or writing out data in a POVRay or VRML 3D file format. If you are doing a fancier presentation, you can even export a movie of your molecule by clicking on the menu item "File->Save Movie As". This lets you generate an MPEG movie file that can be used either on a web based journal, or within a slide deck for a presentation.








IMAGES
pymol1.png  -  When you first start up PyMOL, you get both a console window and a viewer window.
pymol2.png  -  Opening a PDB file renders the molecule within the viewer window.
pymol3.png  -  There are a number of presets available to make visualization easy.
pymol4.png  -  There are wizards to help you with more complex tasks, such as working with density maps.
pymol5.png  -  The plugin manager allows you install, remove and configure your PyMOL plugins.



URLS
https://www.pymol.org  -  The main web site for PyMOL
http://www.pdb.org  -  The RCSB Protein Data Bank
