Developing Your Own Scientific Python Code


In many cases, scientific research takes you into totally new areas of knowledge, never before walked by others. This means that the computational work you need to do may be totally new, as well. While most of this code development still happens in C or FORTRAN, Python is growing in popularity. This is especially true in physics. While a basic text editor is fine if you are just working on a small code base, once your project reaches a certain size using a proper IDE is a huge advantage. Luckily, there is an open-source project that seeks to fill this exact niche: spyder. Spyder is available for Windows, Mac OSX and Linux. You should be able to find a package for your distribution. If not, you can always grab both binaries or source code at the main spyder web site. Spyder is actually written in Python, and has been designed with a plugin architecture. This means that you can add extra functionality by installing plugins. If you can't find a plugin for the functionality you need, you can always write your own.

When you start up spyder, you end up with several panes open and a temporary Python script that you can use to start editing. [spyder1.png] The main pane is the editor, where the temporary script is loaded and ready for you to start working. The right-hand side of the window is broken into two more panes. The bottom pane is the console to a running Python interpreter. Here you can see that spyder automatically loads NumPy, SciPy and Matplotlib on startup. This way, you already have most of the tools that you will likely need ready for you. You can use this console, just as you would any other Python interpreter. The top pane has multiple tabs. The first tab opened at start up is an object inspector. This tab will let you look at the details of any objects being used in your code. The other tabs available are a variable inspector and a file explorer. Let's begin by looking at the main editor pane. Like any other programming editor, spyder provides full color highlighting of Python syntax. Rope is used to provide code introspection capabilities to the editor. If you start typing a function call, spyder will make suggestions for code completion. Pyflakes provides on-the-fly code analysis. Any errors in your code get highlighted right away with a triangle symbol in the margin. When you hover over it, details for the error are displayed in a popup window. You can also set breakpoints in the editor that are used by the Python debugger. This way, you have a bit of control over how your code runs when you run it under the debugger, pdb.

The console pane gives you a full set of tools for controlling multiple interpreters. When you run a script from the editor, you have the option of starting up a new interpreter to run it in. Or, you can run it in an exisitng interpreter. This behavior can be set in the prefences for spyder. You can also simply create a new interpreter from the console pane directly. Interestingly, you can also create IPython interpreters in the console. Then you have all of the extra functionality provided by IPython at your disposal. One of these advanced features is the ability to use multiple IPython engines in parallel. From the console in spyder, you can create these IPython engines which will run in the background, ready to be used for whatever parallel processing you may have in mind. So, not only can you develop your new scientific code as a parallel program, you can work with it directly from spyder, in parallel. All of these extra interpreters and engines run as separate processes, which means they will not affect spyder itself, or cause it to hang if something bad happens within one of the Python interpreters.

One of the extra tabs in the top right pane brings up the variable explorer. This pane gives you a list of all of the variables that are currently active in the memory space within spyder. It will show you the name, type, size and value for each of the variables accessible in the global namespace. This applies to both the internal Python interpreter and any external ones. The variable explorer can handle all of the standard data types, like strings, integers and floats. It also includes an array editor that can be used to edit lists and tuples. The array editor gives you a nice environment to edit complex data types. Spyder gives you even more tools, though. By right-clicking on a list or tuple, you can do some basic data analysis. Spyder allows you to plot the values inj the data object to see wht it looks like. Or, you can look at a histogram of the values if a statistical analysis would make more sense.

All of these tools are handy, but by themselves aren't enough if you are developing a large code base. In these cases, you will need some kind of project level organization. Spyder can help here, too. You can create a project in order to encapsulate a group files as a single unit. Creating a new project creates a new folder to store all of the associated files. Opening this new project will create a new pane where you can work with the project files. Right-clicking on the project, you can create a new file, folder, module or package. When you create a new file, spyder opens it up in the editor, ready for you to work on.

The last tool you should be aware of is the profiler. The first step in program development is to write code that works. After that, your job is to write code that is as efficient as possible. The rule of thumb is to optimize last, and only what needs to be optimized. But what part of your program is that? Without reliable measurements, you won't know what needs optimizing. In spyder, you can click on the menu item "Run -> Profile" or press "F10". This will run your code under the Python profiler, giving you a breakdown of where all of your time is being spent. Once you have this information, you can focus your energies where they will hopefully do the most good.

Hopefully, you can take spyder and run with it while developing your own scientific Python code. While there are lots of IDE's out there to develop code with, there aren't that many setups geared towards developing scientific code. With spyder, you should have a head start to developing your new breakthrough code, solving the problem that will net you the next Nobel Prize.



URL's
http://code.google.com/p/spyderlib/  -  the main web site for spyder


IMAGES
[spyder1.png] - When you start spyder up, you get several information panes along with the main editor pane.
[spyder2.png] - 
