Tinker with Molecular Dynamics for Fun and Profit

Molecular dynamics computations make up a very large proportion of the computer cycles being used in scienc today. For those of you who remember chemistry and or thermodynamics, you should recall that all of the calculations you would have made were based on treating the material in question as a homogeneous mass where each part of the mass simply has the average value of the relevant properties. Under average conditions, this tends be adequate most times. But more and more scientists were running into conditions that would be on the fringes of where they could apply these types of generalizations. Enter molecular dynamics, or MD. With MD, you have to move down to almost the lowest level of matter that we know of, the level of atoms and molecules. At this level, most of the forces you are dealing with are elctrical in nature. Atoms and molecules interact with each other through their electron clouds. There are several packages available to do this type of work, such as gromacs and gamess. This month, we'll look at tinker.

Unlike most of the software we've looked over the months past, tinker isn't available in most distribution package systems. This means that you will have to actually go out and download from the main web site. There are binary files for Linux (32-bit and 64-bit), Mac OSX, and Windows (32-bit and 64-bit). While these should work in many cases, you will probably want to download the source code and build it with the exact options you are interested in. You can download either a tarball or a zip file containg the source code for tinker. Once it is unpacked, change directory to the tinker subdirectory. There are a number of subdirectories named after the various operating system options available. Since we are using linux, you will want to move to the linux subdirectory. You will find a series of subdirectories for each of a number of possible compilers. For this article, I chose to use the gfortran compiler. Inside the gfortran subdirectory, you will find a number of scripts to handle each of the build steps. The first step is to run 'compile.make' to build all of the required objects. These scripts need to be run from the location where the source code resides, so once you know which set of scripts you are going to use, move over to the subdirectory 'tinker/source'. From here, I ran '../linux/gfortran/compile.make' to compile all of the source code I needed into object files. The next step is to combine these into a single library file by running '../linux/gfortran/library.make'. The last step is to do the linking with the system libraries to create a final executable. This is done by running '../linux/gfortran/link.make'. You will now have a full set of executable files, recognizable by filenames that end with ".x". These executable files can be then moved to any other location you may want to have them to make them easier to use.

You should find 61 different executable files have been created. Each of these executables handle some separate task in the analyses that tinker is designed to do. We will only be able to look at a few different executables to give you a flavor of the types of tasks that you can do. The first is 'analyze.x'. This executable will ask for a structure file (in the tinker '.xyz' file format) and the type of anlysis to run. The output you get back includes the following items: the total potential energy of the system; the breakdown of the energy by potential function type or over individual atoms; the computation of the total dipole moment and its components, moments of inertia and radius of gyration; the listing of the parameters used to compute selected interaction energies; and the energies associated with specified individual interactions. The next executable, 'dynamic.x', performs a molecular dynamic or stocastic dynamic computation. On an initial computation, it will take a '.xyz' structure file as input. If a previous computation was check-pointed, you can use the resultant dynamics trajectory file (or restart file) as input, too. These two programs are both deterministic in their methods. The executable 'monte.x' provides a way to apply Monte Carlo minimization methods to molecular dynamics. It takes a random step for either a single atom or a single torsional angle, then applies the Metropolis sampling method. The executable 'scan.x' takes a '.xyz' structure file as input and finds an initial local minimum. From this first local minimum, the program starts searching out along normal modes to try and find other minima. Once it has searched out along each of these modes, it will then terminate. A number of these 61 executables are support utility programs that do so non-computational work. For example, the executables 'xyzint.x' and 'intxyz.x' convert back and forth between the '.xyz' structure file format and the '.int' internal coordinates formatted file. For all of these programs, the specific details of how they work is determined by a keyword file (with a filename ending with '.key'). There are a huge number of keywords that tinker uses to decide the specifics of any particular run. For example, you could set a single bond stretching parameter with the keyword BOND. The keyword CHARGE will set a single atomic partial charge electrostatic parameter. A full listing of the keywords is available in the tinker documentation.

All of these executables are designed to run as commandline programs. The output tends to be files of numbers, which are hard for a human to evaluate. The group who created tinker also created a program called Force Field Explorer (FFE). [tinker1.png] The executables we built above are not compiled to interface with FFE as is. If you want to compile your own copy and have it interact with FFE, it requires changing a number of source files. In this case, I would suggest that you go ahead and download one of the installation packages that include FFE. These come as a gzipped shell archive. After gunzipping it, you can run the shell script to start up the Java based installer. It will let you select which portions to install along with FFE. Once it is all done, go ahead and start up FFE. It will open up the main window and a console window. From within FFE, you can load up structure files and start up various tinker analyses. When you first open an '.xyz' file, the structure is rendered and displayed in the main window. You can then select the "Modeling Commands" tab to select which specific tinker analysis to run. [tinker2.png] By default, these tinker runs happen locally on the same machine. But it doesn't have to be this way. FFE gives you the option of connecting to a remote machine, likely more powerful than your desktop, and getting the actual tinker programs to run over there. Once you have results, you can change the visual details like colors and whether to use wireframe or tube and so on. You also have the option of exporting a visual as an image file in one of several file formats.

I could easily fill the entire contents of Linux Journal in order to cover even the most basic functionality provided by tinker. Hopefully, you will have seen enough to get an idea whether this software might be of use to you. If so, there is a rather large amount of detailed documentation available at the main tinker web site.



Pictures
tinker1.png -
tinker2.png -

Links
http://dasher.wustl.edu/tinker - Main page for tinker
http://en.wikipedia.org/wiki/Molecular_dynamics - An introduction to molecular dynamics

~
~
~
~
~
~
~

