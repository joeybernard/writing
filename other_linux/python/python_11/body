Being someone who lives on the east coast of Canada, weather is something that is constantly a topic of conversation. The common wisdom is that if you don't like the weather, just wait five minutes and it will change to something else. While people have use Raspberry Pis to create lots of Twitter tickers, I thought this issue we could look at how to write up a weather ticker in Python. There are many different services available that provide weather data through a number of different APIs. Some can be accessed directly through a URL, while others are a bit more complicated. Luckily, for the more complicated options there are are wrappers written to make the data collection easier. We will look at several services and see how to pull data from a number of them.

The first service we will look at is the one provided by Weather Underground (http://www.wunderground.com). This service uses weather information collected by individuals from around the world, using data from personal weather stations. As with most services, you will need to get an API key in order to pull down the weather data for your ticker. You can purchase a developer key for free, as long as you don't download more than 500 times per day or 10 times per minute. This should be adequate for personal use. Interacting with Weather Underground involves sending a request as an HTTP URL and receiving back either a JSON or XML file. In the sample code, we pulled back the data as JSON. The first thing you will need is your location identifier. You can request a location identifier by either latittude and longitude, or by geolocating your current IP address. You can even do a search by place name. Once you have this, you can go ahead and start to make data requests. You can import the urllib2 and json modules to make the request and parse the output. For example, let's say you wanted to get the current conditions at Cedar Rapids. You could do this with the following
   f = urllib2.urlopen('http://api.wunderground.com/api/YOUR_KEY/geolookup/conditions/q/IA/Cedar_Rapids.json')
You can now load this data and parse it with
   json_str = f.read()
   json_parsed = json.loads(json_str)
The json_parsed variable will now contain all of the available current conditions, such as temperature or precipitation. There are many other data features provided by the Weather Underground, including weather alerts, a 3 day forecast, a 10 day forecast, hourly forecasts and tide forecasts. There is also historical information, in case you need it for another project.

The next service we will look at is that provided by forecast.io. Forecast.io aggregates weather data from several different sources around the world. It parses through all of these data sources and provides current weather conditions and a forecast for your location through an API over HTTP. The returned data can be a bit messy, so there are wrappers for many different environments, including Python. This wrapper is available on GitHub from Ze'ev Gilovitz (https://github.com/ZeevG/python-forecast.io). While you can download and install from source, you should be able to install it using pip with
   pip install python-forecastio
As with Weather Underground, you will need to go to forecast.io and get an API key in order to make requests. And, as with Weather Underground, this API key is free.

Once you have collected the weather data that you were looking for, you need to display this information. The simplest is to just print it out. This works well if you are using a console as the interface. There are also several LCD options available if you want to make a self-contained weather reporting service. The exact code used to handle the LCD will vary by manufacturer, but they all have very good documentation available. And, now that you do have the weather reports being served up to you, you will no longer have any excuses for being caught unawares by a storm or showing up to work drenched by rain.