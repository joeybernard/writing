In the previous issue, we looked at how to turn your Raspberry Pi into an RSS feed reader and how to allow your Raspberry Pi to post an RSS feed for others to read. This issue, we will continue along the same lines and look at how to add the ability to have your Raspberry Pi post tweets for the rest of the world to follow what is happening.

The first step is to find some way to talk to Twitter. Twitter provides a full API that defines how you can send and read tweets. We could work with raw sockets and manually format and send messages and process the returned results. But this completely defeats the whole point of Python and the premise of code reuse. Instead, we will use the module 'python-twitter'. There are several other options available, too, in case you wish to look for a module that uses a different code style that better matches your own. They should all have the same functionality, so feel free to explore and experiment. For these examples, you can install the module with 'pip install python-twitter'. This works fine for Python 2.X, but Python 3 support is something that is in progress. So you may need to pick a different module if you want to use Python 3. If you need the latest features, you can always grab the source code from github and build it.

Once you have the module installed, you can import it within your code with 'import twitter'. The class 'twitter.API' provides the main interface to allow you to interact with the Twitter API. When you create a new instance of the class, you need to provide your credentials in order to authenticate to Twitter and be allowed to wotk with your account. Twitter now uses Oauth as the main way to handle authentication. This means that you need to generate an access token that your code can use to identify itself with. Twitter has an entire section within their developer documentation that covers the steps required to get your token, located at "https://dev.twitter.com/oauth/overview/application-owner-access-tokens". The first step is that you need to register your code as an application that is allowed to talk with Twitter. You handle this by going to "https://apps.twitter.com" and creating a new app. This gives you the consumer key and consumer secret that identifies your code as being allowed to connect to Twitter. The second step is to create an authentication token for your account that tells Twitter that this app is allowed to connect to your account and is allowed to read it and post to it. You should end up with two seperate keys and their associated secrets that you can now use to create an instance of the API class. The code looks like
   import twitter
   api1 = twitter.API(consumer_key='consumer_key',
                      consumer_secret='consumer_secret',
                      access_token_key='access_token',
                      access_token_secret='access_token_secret')
where the relevant keys and secrets are the ones that you just generated above. You can check to see whether these credentials worked by calling the function 'api1.VerifyCredentials()'. This will either give you an error or give you a breakdown of the account information.

Once you have an authenticated connection to Twitter, your Raspberry Pi project can start to talk to the world at large. The most basic method is 'PostUpdate()'. With this function, you can send in a status update message, to a maximum of 140 characters. If your message is longer than that, you can use the function 'PostUpdates()' which will post multiple status updates 140 characters at a time until the entire message is posted. If you want to, you can include other details with your message. This includes options like the current longitude and lattitude, or a place ID, to identify where a particular update came from. This might be handy on a mobile monitoring project of some kind where you want to know where a particular update came from. You can also post an update as a response to some other message, by including the 'in_reply_to_status_id=' option in the function call. If you don't want to use public status updates for your messages, you can use the function 'PostDirectMessage()' to send a text message to a particular other account. You can use either the user_id or the screen_name to identify the recipient of your direct message. While this is a bit more private than a public update, it is by no means secure. So don't plan on sending any compromising information using this method. If you want to, you can also send multimedia files as Twitter updates, rather than only simple text. The function 'PostMedia()' can take either a local file name or an HTTP URL to do a multimedia tweet. You can send image files like JPG, GIF or PNG files. You can also include an associated text message for the tweet, as well as location information if you want to geolocate the tweet and image. Once you finish any of these posting functions, you get a 'Status' object returned which gives you details of your Twitter status. There are two dozen elements giving you items like whether it has been favorited, when it was created and what hashtags are associated.

The Twitter API also allows you to read updates and direct messages from other users. This means that you can use this same communication channel to be able to send commands to your Raspberry Pi project. The function 'GetDirectMessages()' can get up to the last 200 direct messages sent to your Raspberry Pi's Twitter account. Luckily, you don't have to do this every time. You can use the option 'since_id=X' to tell Twitter to only send those direct messages that are newer than message ID X. If you are only interested in getting the last Y messages, you can instead use the option 'count=Y'. This function returns a sequence of DirectMessage object instances. This structure contains the message ID, the creation date, recipient and sender information, as well as the actual message text. This way, you can send commands within the text message so that your project can do different tasks after it has been deployed.

With the examples we have covered here, you should be able to have your project tweet what is going on out to the world. This may be useful in cases like monitoring projects where you want to be able to check on measurements easily. If you do something really cool, I would love to hear about it.