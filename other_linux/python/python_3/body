Over the last few issues, we've looked at some fundamental concepts in Python around objects, object-oriented programming, and how objects are stored in memory. This issue, let's take a loook at the Raspberry Pi, and one of the unique features not usually offered on single-board computers. Of course, I'm speaking of the GPIO pins. GPIO stands for General Purpose Input/Output. They provide an interface between the Raspberry Pi and the outside world. These pins can act as either inputs into the computer, or outputs to the outside world. With the addition of these pins, the possibilities for the Raspberry Pi explode. It goes from simply a single-board computer to a project platform. Now, you can imagine using it for robotics, or as the smarts within some scientific instrument. Many people are using the Raspberry Pi as the core for home automation projects. It really is only limited by your imagination. We will focus on how to talk to the GPIO pins, rather than how to wire up the electronics. While the Linux kernel has modules to support communicating with the GPIO pins, this isn't enough. You will also need support within whichever programming language you are using. Since this column is about Python programming, we will focus only on those Python modules available for your use. Luckily, if you are using a standard distribution, like Raspbian, then you will have this available to you out of the box. If you are using some other distribution, or if you are really adventurous and have rolled one yourself, you will need to go out and grab a relevant Python module from the web. In this article, we will be looking at the RPi.GPIO module. But this is not your only option.

Before we move on to the actual code, we should take a little time to look at the elctronics first. While there is not enough time to do a crash course, there are a few items that everyone should know about how the GPIO pins are implemented on the Raspberry Pi. The first thing to note is that there are two versions of the Raspberry Pi, and the layout of the pins is different on both.

Once you have your circuit all wired up, it is time to start actually talking to it. When you are just starting out, you may want to simply start up the Python interpreter and simply enter your code directly. That way, you experiment and try things out. Once you get a feeling for how things work, you will be more comfortable writing Python scripts