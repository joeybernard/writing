@ Title (2-4 words)  -  5 words
Travelling with a Raspberry Pi



@ Standfirst (20 words approx)  -  16 words
This month, we will look at how to use your Raspberry Pi as a mapping guide.



@ Bio (20-30 words)
Joey Bernard is a true Renaissance man, splitting his time between building furniture, helping researchers with scientific computing problems and writing Android apps



@ Body ( = 9400 - P characters, where P = [no. of lines of code in new paragraphs x 35] + [no. of new paragraphs for code x 70], eg 5 lines of code at 35 characters per line, split into 2 separate paragraphs rather than a single paragraph of five lines, means a reduction of 315 characters from the overall character count)  -  9461 characters

In a previous article, we looked at how to connect a GPS to your Raspberry Pi and be able to find your current location on the planet from the GPS receiver. This month, we will look at how you can use this kind of location information to build your own mapping application, such as a navigation system. We will be making a few assumptions about what hardware is connected to your Raspberry Pi. The first is that you have some kind of GPS receiver attached, in order to give you your current location. Second, we will assume that you have some kind of display screen attached, so that you can have a graphical user interface available to draw maps on to. Lastly, we will assume that you have some kind of Internet access available to the Raspberry Pi. For example, you may decide to use your phone as a hotspot or you may use one of the wireless networking shields available for the Raspberry Pi. Assuming you have this hardware connected, we will look at what we can do with some Python code to visualize where we are in the world.

The first step is to be sure that you have the correct Python modules installed. We will be using two main packages, googlemaps and webbrowser. You probably want the latest version of each, so you can use the command
   sudo pip install googlemaps
   sudo pip install webbrowser
There are a number of dependencies also needed, that pip will install at the same time. The first module talks to the Google mapping API to be able to make data conversions, and to be able to make location-based queries. The second module is actually part of the standard Python library, and is used to talk to web browsers installed on your system. This implies that we will be using a web browser that needs to be installed on your Raspberry Pi. You can select any browser that you are comfortable using, such as Firefox or Google Chrome. This way, we can use the web API from Google to draw the actual map itself. In order to use any Google APIs, you need generated keys in order to authenticate yourself. You need to go to the web page 'https://developers.google.com/console', log in using a Google account and either select an existing project or create a new one. You can then select which APIs that this key will be valid for. The type of key you need to generate is called a server key, and will be used by the googlemaps module. You can now create a googlemaps client object which you can use to talk to the Google Maps server with the code below.
   import googlemaps
   gmap = googlemaps.Client(key='your key here')
Now you can interact with the Google map services through the newly created googlemaps object. For example, you can query an address and get geographical information about it with the code below.
   location1 = gmap.geocode('116 Tudor Ave, Charters Settlement, NB')
This location information contains the complete address, including each political level such as municipality, county, province, country, etc. It also includes the latitude and longitude of the location. This is handy if you have an address that you are trying to plot on your map, but we already have a GPS receiver attached to our Raspberry Pi that can give us the coordinates of the current location. You can actually do the reverse of this and find out what the nearest address is to your current location. You can use the method
   addresses = gmap.reverse_geocode([45.836, -66.742])
will get a list of all of the civic addresses near this location. There are several other methods available, some of which we will dig into a bit later.

Now that we have some coordinates for our location, we need some way to visualize it. Google Maps provides a different API to access its map rendering functionality. These have all been designed around some kind of web browser used to actually render a visible display. The two APIs we will look at are a static one and a JavaScript one. Both of these also require an API key in order to do the query. Since they are web-based interfaces, they take the form of a URL. This URL needs to be handed off to a browser to handle the map rendering. This is where we will use the webbrowser module, as in the example below.
   import webbrowser
   browser = webbrowser.get()
   browser.open(url)
The 'get()' method returns a controller object that opens the default browser on your system and allows you to interact with it through the controller. We then use the 'open()' method of the controller object to load the given URL into the newly created web browser. The URLs have the form
   https://maps.googleapis.com/maps/api/staticmap?center=45.836,-66.742&zoom=14&size=400x400&key=YOUR_API_KEY
The parameters included are the ones required by the API. The parameter 'center' can take either an address or a set of longitude and latitude. The zoom level goes between 0 and 21. Level 0 allows you to see the entire world, and each increase in value zooms you in. The size parameter tells the web interface what size, in pixels, to render the map to. The last parameter is your API key that you authenticate with. Again, you will need to make sure that the static map API is enabled for your API key. Otherwise, you will get an error message telling you that the relevant API is not enabled yet.

While this code is fine if you are happy using a web browser to display the rendered map image, this isn't your only option. You can use one of the URL handling modules to actually download the rendered map as an image file. For example, you could install the pycurl module with
   sudo pip install pycurl
and download a JPEG version of a map with
   with open('out.jpg', 'wb') as f:
      c = pycurl.Curl()
      c.setopt(c.URL, 'https://maps.googleapis.com/maps/api/staticmap?center=40.714728,-73.998672&zoom=12&size=400x400&format=jpg&key=YOUR_KEY')
      c.setopt(c.WRITEDATA, f)
      c.perform()
      c.close()
This code saves the map to the file 'out.jpg' that you can then use later in one of the Python GUI frameworks, such as kivy. In all of these examples so far, we have just rendered a map centered on the location coordinates given to the Google mapping API. There is nothing visually identifying where that location is on the map, however. Luckily, there is an extra parameter named 'markers' that you can use. For example, you could use a URL like
   https://maps.googleapis.com/maps/api/staticmap?zoom=15&size=400x400&markers=color:blue|45.836,-66.742&format=jpg&key=YOUR_KEY
which will use implicit positioning to render a map centered on the coordinates of the the added marker. It will also draw a blue marker icon identifying that location.

This code works fine for finding your current location and displaying it on a map, but that is not enough functionality for a navigation system. If you are trying to navigate, you need to be able to get directions from where you are to where you want to get to. The Google mapping API provides a method of getting these directions for you. The googlemaps client object we created earlier has a method called 'directions()' that can return a list of possible routes. For example, you could use the code
   directions = gmap.directions(origin='address1', destination='address2', mode='walking')
to get directions for walking from one address to another. The origin and destination parameters could also be location coordinates, too. The mode could be driving, cycling or transit, if you don't feel like walking. The directions are returned in a list, one element for each potential route. If you look at one of the routes, you will see that you get a dictionary describing each leg of the route. These descriptions include start and end coordinates, distance and time between the start and end, as well as an HTML text description that you could display to the end user. When you reach the end of one leg, there is also a maneuver given that tells you how to progress to the next leg. For example, it will tell you whether to turn left or right, or to continue on. You can use other parameters to the 'directions()' method to avoid certain features or select the form of transit, in order customize the results for your particular case.

Now that you have navigated to your destination, how do you know that you are in the correct location? You can use the Google Street View API to get an image of the location to display to the end user. The Street View API needs to be enabled first, and then you can use a URL such as that below.
   https://maps.googleapis.com/maps/api/streetview?size=400x400&location=40.720032,-73.988354&fov=90&heading=235&pitch=10&key=YOUR_KEY
You can use this URL with the pycurl code we looked at earlier to download the returned image as a file so that you can display it to the end user.

In this article, we have covered enough of the basics that you could conceivably put together your own vehicle navigation system with a Raspberry Pi, a screen, a GPS receiver and an Internet connection. While we have only been able to cover the most basic elements, there is enough here to be able to build a really interesting and robust project. Just let your imagination roam.



@ Boxout title (2-4 words)  -  5 words
Google isn't your only option



@ Boxout text ( = 2200 - Q characters, where Q = [no. of lines of code in new paragraphs x 45] + [no. of new paragraphs for code x 90] )  -  2369 characters

In the main article, we have focused on using the Google mapping services, but they aren't the only ones available. The Python module geopy can handle the geocoding functions that the googlemaps module does. The difference is that geopy can use services from several different sources, including Google, Bing or OpenMapQuest, among others. They are available as geocoder classes within the package. For example, you could get the location from the Nominatum service with the following code.
   import geopy
   geocoder = geopy.geocoders.Nominatum()
   location = geocoder.geocode('175 5th Avenue NYC')
The returned location object is a dictionary including the full address, the latitude and longitude, among other values. Once you have geographical data that you want to render and display for the end user, you can use the module geoplotlib to do so. Geoplotlib uses mapping tiles from OpenStreetMaps providers in order to render the map you are trying to draw. By default, it will use the tiles provided by MapQuest. The most basic way to use it would be the following code.
   import geoplotlib
   geoplotlib.dot({'lat':[45],'lon':[-66]})
   geoplotlib.show()
As you can see, geoplotlib is modelled after matplotlib in that all of the drawing commands are done in memory until the final 'show()' method is called. At that point, a new plot window is popped up. The 'dot()' method draws a set of dots using the list of coordinates given as parameters. All of the defaults will try and do the most sensible thing and size the map and the zoom level such that all of the given coordinates can be viewed. There are options to control the details of your map, as well. If you want a map image file, rather than a display window, you can use the method shown below.
   geoplotlib.savefig('map1')
This will pop up the display window, take a screenshot of the rendered map, and save it off to the filename given. The file format is PNG, so the file ending '.png' will be automatically added to the filename you gave.


@ Full code listing (optional, no more than 50 lines of code at 70 characters per line; if this is supplied, change the body text to (6100 - P) characters)
xxxx
