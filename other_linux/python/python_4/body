Last issue, we looked at using the GPIO pins to send signals out from your Raspberry Pi. This month, we will look at using the input functions of these input/output pins. As with the last article, we won't be looking at the electronics side, but instead focusing on the Python code that you can use to collect data from your environment. Having said that, we should mention something about safety. When you are reading in voltages, you always need to be concerned about the potential for damaging spikes. The Raspberry Pi, while sturdy, is not indestructible. You should always have a buffer between the outside environment and your Raspberry Pi that will limit the maximum possible currents and voltages. There are lots of examples on the internet that can give you some ideas.

Once you have your sensor wired up, it is time to start up your code and actually start using the data that you are reading in. If you remember from last issue, the first step is to import the RPi.GPIO module. Remember that you can import this module as another shorter name to make the rest of your code easier to write and read. Then you will need to set the mode for the module, which will set which number scheme you will be using. The two options are either GPIO.BOARD or GPIO.BCM. The last step to set yourself up is to pick a pin and setup the channel. At this point, we need to discuss pull-up and pull-down resistors. If the input pins are left alone, then they will tend to float and pick up any stray voltages that may be in the environment. Being inside a modern house, this is usually some stray electromagnetism from the mains wires. What we want is to have the pins tied either to high or low as the default voltage. In many cases, this is done in hardware where you tie the pin down physically to either ground or to the max voltage. You need to have a resistance in the circuit to either the high or low voltage, hence the name pull-up or pull-down resistor. The Raspberry Pi has the ability to define these internally in software. When you setup the channel, you can define an extra option, called pull_up_down, to be either high or low. This way, you can deal with this problem of floating inputs without the extra hardware. To do this, you can use either
   GPIO.setup(channel, GPIO.IN, pull_up_down=GPIO.PUD_UP)
      # or
   GPIO.setup(channel, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
where channel is the pin number, based on the mode you set.

So, now that you have everything setup, you probably want to start reading data in. A key thing to know is that none of the GPio pins is designed to handle analog input. This means that you can't directly measure things like voltages or currents. What you need to do is use some form of analog-to-digital circuit to convert any analog signal into a measurable digital signal that your Raspberry Pi can use. A simple signal is when a button is pressed. It is easy to wire a circuit so that when a button is pressed, you get either a low or high signal. You can use this to test your code separate from whatever circuitry you have to actually measure some environmental signal. The GPIO module includes a function called "input()" that reads some signal from a channel tied to a particular pin. Since the GPIO pins are digital, you will get either a 1 or true, or a 0 or false. So you can make decisions on either the numerical value or the boolean value.

Assuming you have everything wired up correctly, you have two different techniques you can use to read this data. The first is straightforward polling. Essentially, you try to read from your input pin continuously, with some sort of a sleep statement between each attempt. Assuming that you set the pin up to have a pull-down resistance, so that the default value is low, the you can poll the pin with a piece of code like
   while GPIO.input(channel) == GPIO.LOW:
      time.sleep(0.01)
In this case, the code checks to see whether the pin is low, and if so, then it sleeps for 0.01s. While this code is easy to write, polling puts a fairly heavy load on the CPU. If you want to free up the CPU of your Raspberry Pi, you may want to use a callback function instead. Callbacks are handled in a single extra thread. This means that if you define more than one callback function, they will get executed sequentially. A basic callback function is defined with code like
   GPIO.add_event_callback(channel, my_callback_func)
where my_callback_func is some function you have defined. This callback is triggered whenever a change is detected. If you want to only trigger your function either when the pin goes high, or when it goes low, then you need to tie your callback function to on eof these edges. For example, if you wanted to run your callback function when the pin goes high, you would use something like
   GPIO.add_event_detect(channel, GPIO.RISING, callback=my_callback)
You can equivalently trigger your callback function on GPIO.FALLING or GPIO.BOTH. When you have detected the event in question, you may want to stop the triggering of callbacks. You can do this with a call to GPIO.remove_event_detect(channel). Don't forget, once you have finished all of your interactions with the GPIO pins you need to clean up. You can do this by calling GPIO.cleanup(). If you only want to cleanup the individual pins you were working with, you can do so with GPIO.cleanup(channel).

Now that you can both read and write from the GPIO pins, you are ready to use your Raspberry Pi to interact fully with the real world. Next issue, we'll look at using matplotlib to visualize some of this interaction with the world at large. Until then, put some thought to how you can interact with the world at large and let your imagination run wild.