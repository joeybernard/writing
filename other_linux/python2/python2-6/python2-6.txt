Pi code-based tutorial, 4 pages
-feel free to include commands and small segments of code in-line with the body text, but for larger chunks of code please use figure references or refer people to the coverdisc as we can supply them with code, if you send it in with your commission.
Note: please indicate where code starts and ends with /c/ and any output with /o/, as it enables a non-tech savvy art person to layout the pages e.g.
/c/
$ telnet 192.168.1.200 8000
/c/
/o/
Trying 192.168.1.200...
/o/

Code takes up a lot of space, so if you decide to separate out any code onto a line on its own you will need to REMOVE words from the total word count for the section your writing. This works out as follows:
One line of code is equal to 30 words (we have a line break before and after code that is being pulled out of the body copy, which is why it takes up more space), two lines of code are equal to 40 words and three lines are equal to 50 words and so on.

Note: We've included the number of characters as an extra useful reference for each section as sometimes a word count can be less accurate depending on the length of words that are used.

@ Title  -  9 words
Using Kivy to Give Your Code a Pretty Face



@ Standfirst  -  20 words
Many projects could benefit from a GUI dashboard. This month we will look at using Kivy on your Raspberry Pi.



@ Profile  -  44 words
[Joey Bernard]
Joey Bernard has written a column on scientific software, as well as a column on writing Python code for the Raspberry Pi. In his day job, he helps researchers and students at the university level in designing and running HPC projects on supercomputing clusters.



@ Resources
List everything required for this tutorial and provide URLs if applicable.
If you are using hardware, mention it and a possible stockist. For software, please provide a URL.

@ Lead image
Supply an engaging main image to illustrate the feature (grey box in the example PDF); either an interesting, representative and uncropped screenshot of the software, or if there is nothing appropriate then either round up all of the relevant icons or suggest a possible illustration or diagram recreation and we will create some artwork in-house.

NOTE: this compulsory as you can see from the PDF this is large on the first page. If you have an idea for an illustration or a hardware shot, please contact us as early as you can to allow us to get that organised.

Total word count is 2,952 (roughly 16,940 char).

@ Intro text  -  180 words
In this column, we have looked at lots of different projects that you could use your Raspberry Pi for. While we looked at code that was specific for each project, such as how to talk to Bluetooth devices or communicate over the GPIO bus, we did not do much with how to interact with people. This month, we will take a look at Kivy, in order to be able to create graphical displays and dashboards. Kivy is a multi-platform library for Python that gives you the tools you need to build a GUI for your Python code. While we will be looking at using it on the Raspberry Pi, Kivy is available on Linux, Windows, Mac OSX and even Android. So, you can take the examples given here and reuse them in lots of other projects. Along with dashboard displays, Kivy provides several different interface options, like buttons, touch screens and even multi-touch interfaces. By the end of this article, you should have the tools you need to add a really useful interface to your Raspberry Pi project.



@ Body text

@ Subheading1  -  Installation
Installation is pretty easy if you are using Raspbian, or some other Debian variant, as the distribution on your Raspberry Pi. You can install it with the following command:
/c/
sudo apt-get install python-kivy
/c/
If you have moved to writing your code using Python 3, you can install the package 'python3-kivy' instead. There is also the package 'python-kivy-examples', which provides a number of sample pieces of code. These are handy to have locally on your development machine. This gives you code snippets without having to be online. They are located in the directory '/usr/share/kivy-examples'. It is definitely worth taking a look in this location to see examples of all of the things you could add to your own program.

@ Subheading2  -  Hello World
Since Kivy is a full GUI toolkit, it will involve a bit more boilerplate code wrapping the actual functional bits. For example, the code below is an example of a 'Hello World' program.
/c/
from kivy.app import App
from kivy.uix.label import Label
class MyApp(App):
    def build(self):
        return Label(text='Hello world')
if __name__ == '__main__':
    MyApp().run()
/c/
As you can see, the first step is to import the 'App' class, and implement your own subclass based on it. In this case, the subclass is named 'MyApp'. The primary method that you must implement is the 'build()' function. This method gets executed when your app starts and generates the actual windows and other display elements. In the above example, the code simply generates a Label object in order to show the text 'Hello World'. Once you have the code saved in a Python script file, named 'myapp.py' for example, you can simply run it with the command 'python myapp.py'.

@ Subheading3  -  Displaying Data
Moving beyond a simple text display, what tools does Kivy provide for displaying data? Since we're talking graphical displays, you probably want to start with being able to display images in your program. This is handled through the Image class. For example, you could add the following to the earlier boilerplate.
/c/
from kivy.uix.image import Image
....
    def build(self):
        return Image(source='image.png')
/c/
This loads up and displays the image file given as the source for the Image class. This works great for images stored locally, but you may want to load images from some remote source, like a web server. In these cases, you may want to use the 'AsyncImage' class instead. This puts the loading of the image into the background and keeps the rest of your program from blocking while the image is being loaded.

@ Subheading4  -  Layouts
@ Subheading5  -  Interacting with the World
@ Subheading6  -  Events
@ Subheading7  -  Non-widget Stuff
@ Subheading8  -  Where to now?


@ Supporting images
3 images required; please indicate whether we need to crop in on a particular part of a screenshot.

If you wish to include diagrams, supply a reference copy and we will re-create this in-house.

If you are referencing sections of code, please make them as Figure 1, 2 and so on and mention them in the copy.

@ Captions
Images need captions, which need to be around 15 words each.

A note on captions:
These are a device intended to provide additional information that's not directly in the text of the tutorial or simply stating what the picture is of. A caption that effectively says 'This is X' isn't a good caption.

@ 2x boxouts
60 words each (roughly 350 chars); Needs a title up to 5 words. The contents can be a general tip/trick or piece of knowledge related to this tutorial, or you can go into greater depth on one particular aspect of it.

A note on boxouts:
Boxouts are intended to be 'access points' into the page, so they are meant to be interesting little reads in their own right that hopefully encourage someone scanning the page to dip into the whole tutorial. You can never assume that the reader is actually going to read your words, you have to use all the tricks to encourage them to read.

@ 2x Pullquotes
Choose a short quote, around 15 words, to pull the reader in as they flick through the pages.


[IMAGE USAGE FORM INFO: PLEASE GIVE COMPANY AND CONTACT DETAILS FOR THE IMAGES USED IN THIS FEATURE]
