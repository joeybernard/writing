
@ Title  -  9 words
Using Kivy to Give Your Code a Pretty Face



@ Standfirst  -  20 words
Many projects could benefit from a GUI dashboard. This month we will look at using Kivy on your Raspberry Pi.



@ Profile  -  44 words
[Joey Bernard]
Joey Bernard has written a column on scientific software, as well as a column on writing Python code for the Raspberry Pi. In his day job, he helps researchers and students at the university level in designing and running HPC projects on supercomputing clusters.



@ Resources
https://kivy.org
http://pygments.org



@ Lead image
I think maybe some combination of the Kivy, Python and Raspberry Pi logos?



@ Intro text  -  180 words
In this column, we have looked at lots of different projects that you could use your Raspberry Pi for. While we looked at code that was specific for each project, such as how to talk to Bluetooth devices or communicate over the GPIO bus, we did not do much with how to interact with people. This month, we will take a look at Kivy, in order to be able to create graphical displays and dashboards. Kivy is a multi-platform library for Python that gives you the tools you need to build a GUI for your Python code. While we will be looking at using it on the Raspberry Pi, Kivy is available on Linux, Windows, Mac OSX and even Android. So, you can take the examples given here and reuse them in lots of other projects. Along with dashboard displays, Kivy provides several different interface options, like buttons, touch screens and even multi-touch interfaces. By the end of this article, you should have the tools you need to add a really useful interface to your Raspberry Pi project.



@ Body text

@ Subheading1  -  Installation
Installation is pretty easy if you are using Raspbian, or some other Debian variant, as the distribution on your Raspberry Pi. You can install it with the following command:
/c/
sudo apt-get install python-kivy
/c/
If you have moved to writing your code using Python 3, you can install the package 'python3-kivy' instead. There is also the package 'python-kivy-examples', which provides a number of sample pieces of code. These are handy to have locally on your development machine. This gives you code snippets without having to be online. They are located in the directory '/usr/share/kivy-examples'. It is definitely worth taking a look in this location to see examples of all of the things you could add to your own program.

@ Subheading2  -  Hello World
Since Kivy is a full GUI toolkit, it will involve a bit more boilerplate code wrapping the actual functional bits. For example, the code below is an example of a 'Hello World' program.
/c/
from kivy.app import App
from kivy.uix.label import Label
class MyApp(App):
    def build(self):
        return Label(text='Hello world')
if __name__ == '__main__':
    MyApp().run()
/c/
As you can see, the first step is to import the 'App' class, and implement your own subclass based on it. In this case, the subclass is named 'MyApp'. The primary method that you must implement is the 'build()' function. This method gets executed when your app starts and generates the actual windows and other display elements. In the above example, the code simply generates a Label object in order to show the text 'Hello World'. Once you have the code saved in a Python script file, named 'myapp.py' for example, you can simply run it with the command 'python myapp.py'.

@ Subheading3  -  Displaying Data
Moving beyond a simple text display, what tools does Kivy provide for displaying data? Since we're talking graphical displays, you probably want to start with being able to display images in your program. This is handled through the Image class. For example, you could add the following to the earlier boilerplate.
/c/
from kivy.uix.image import Image
....
    def build(self):
        return Image(source='image.png')
/c/
This loads up and displays the image file given as the source for the Image class. This works great for images stored locally, but you may want to load images from some remote source, like a web server. In these cases, you may want to use the 'AsyncImage' class instead. This puts the loading of the image into the background and keeps the rest of your program from blocking while the image is being loaded. There are quite a few parameters to the class instantiation that help control the image display. You can set 'allow_stretch' to let the image fill the containing box. The image ratio is kept by default, but you could allow it to get stretched regardless by setting the parameter 'keep_ratio' to False. If the image your are loading is an animated GIF file, Kivy gives you control over it. You can set how many times to loop through it with the parameter 'anim_loop', while you can control how fast the animation happens with the parameter 'anim_delay'. If your system is actually updating the image file, say you are updating a plot with new data, you can tell your program to reload the new image data with the method 'reload()'.

You may, instead, need to build up your graphical imagery from scratch. The subsection 'kivy.graphics' contains a number of graphical primitives that you can use to build up required imagery. These primitives include objects like lines, ellipses, points, rectangles, beziers and triangles. There are also a number of methods available to alter these graphical elements. These include transformational functions like translate, scale and rotate. You have other standard graphical elements, like pop ups and labels, that allow you to display textual information. For example, the following displays the contents of a text file:
/c/
from kivy.uix.label import Label
text_file = open('my_file.txt')
text_str = text_file.read()
label1 = Label(text=text_str)
/c/
You can control the layout of the text with parameters such as 'font_name', 'font_size', 'color', 'halign' and 'valign'. You can even make your text box interactive by adding the markup '[ref=XXXX]' and '[/ref]', where 'XXXX' is a label for the reference. This makes the text surrounded by these delineators a link that can have some function bound to it. The following code shows how you would get the function 'my_func' to fire when the word hello gets clicked.
/c/
label1 = Label(text='[ref=hello]Hello[/ref] World', markup=True)
label1.bind(on_ref_press=my_func)
/c/
As you can see, you also need to include the parameter 'markup=True' so that the markup tags get processed correctly.

The last big graphical element that you can add to your program is the ability to play video files. All of the really hard work is wrapped up in a very complete VideoPlayer object. With the following code, you get a video display with all of the usual playback controls.
/c/
from kivy.uix.videoplayer import VideoPlayer
player = VideoPlayer(source='my_film.avi', state='play')
/c/
This loads the video file and starts it playing immediately. It also includes all of the standard controls so that the end user can control playback.

@ Subheading4  -  Layouts
While we have looked at a lot of the elements that can be used to display things within your program, we have not looked at how they are actually laid out on the screen. As with many other graphical toolkits, Kivy gives you a set of classes, called layouts, that manage the physical organization of the various elements. As a basic example, the following code draws two buttons, one above the other.
/c/
layout = BoxLayout(orientation='vertical')
btn1 = Button(text='Hello')
btn2 = Button(text='World')
layout.add_widget(btn1)
layout.add_widget(btn2)
/c/
The first line creates the layout object, oriented vertically. Then, two button objects are created. All of the objects that generate graphical elements for your program subclass the basic class for widgets. So you can use the 'add_widget()' method of the layout object to add them to the display. The box layout can be thought of as a one dimensional layout, where you can have your widgets grouped either vertically or horizontally. Moving up one dimension, you use the grid layout object. Unlike many other graphical toolkits, you do not have direct control over where widgets are placed within the grid. They get placed simply in the order that they are added to the layout object. They are laid out in row first order. You need to give the grid layout at least one of either the cols or rows parameter. The sizing of the widgets need to match. That is, all of the widgets in a given column need to be the same width and any widgets in a given row need to be the same height. If you want to be more flexible in the sizing of your widgets, you may want to use the stack layout instead. In a stack layout, widgets in a given row or column no longer need to be the same height or width. 

You can move up another dimension by using the page layout object. This creates a multi-page layout where widgets can be added to each page, and you can flip back and forth between them using the borders. A more structured layout object is the anchor layout. In this case, you define an 'anchor_x' and 'anchor_y' parameter. These can take on the values of top, center or bottom. This essentially pins the children of the anchor layout to one of the borders.

@ Subheading5  -  Interacting with the World
Many of your projects will also need to accept input from end users. This could come in a variety of forms. We have already seen buttons in some of the earlier code examples. Moving beyond the button, Kivy provides a toggle button. The toggle behaves much like a checkbox does. You can make it behave more like a set of radio buttons by using the group parameter. In this case, only one member of the group can be in the down state at a time.

While these types of input values are simple on or off values, that may not be enough. In these cases, you can add a slider to your program.
/c/
from kivy.uix.slider import Slider
s = Slider(min=-100, max=100)
/c/
You can read off the value that the user has set it to by checking the value property of the slider. You can also set this value property, which will reset the slider to that position on the display.

For the inputting of textual data, you have a couple of options. The first is the 'TextInput' class. This class allows you to add a text box where the user can add whatever data they wish to type in. It handles cursor movements within the text box, as well as clipboard interaction with the operating system. If you need a more robust textual input option, you may want to look at the CodeInput class. This class lets you embed, essentially, an IDE within your code. You also need to have the Python module pygments installed, as it provides highlighting to the widget. Any of the languages that are supported by pygments gets highlighted within the code editor window. For example, the following code creates a code input widget that highlights Cython code.
/c/
from kivy.uix.codeinput import CodeInput
from pygments.lexers import CythonLexer
codeinput = CodeInput(lexer=CythonLexer())
/c/
There are a huge number of lexers available with pygments. In the rare instances where you need a lexer for some obscure language, you can always build your own.

@ Subheading6  -  Events
We've looked at all sorts of display options, as well as ways that users can input their own data or interact with your program. But how do you manage the actions that are triggered by these interactions? Whenever you actually do anything, such as clicking on a button or typing some text, these actions trigger events within Kivy. Widgets all implement the EventDispatcher to manage these events in a background thread of execution. As you have seen above, events are managed by callback functions that are bound to one or more of these actions. There are several available as part of the widget class. For example, the following code notifies you of any changes in the state of a button.
/c/
def callback(instance, value):
    print('My button <%s> state is <%s>' % (instance, value))
btn1 = Button(text='Hello world 1')
btn1.bind(state=callback)
/c/
This binds the callback function to the state property of the button. Anytime it changes, the callback function gets fired. You can even create your own with the 'register_event_type()' method of the widget class.

Along with these class events, there are also input events. Things like mouse clicks, touches and scroll wheel events are all handled by the class MotionEvent. These are actually dispatched by the 'on_motion()' method of the Window class. They then generate 'on_touch_down()', 'on_touch_move()' and 'on_touch_up()' events in the Widget class. You can override any of these event handlers. The code below is an example.
/c/
def on_touch_down(self, touch):
    if super(OurClassName, self).on_touch_down(touch):
        return True
    if not self.collide_point(touch.x, touch.y):
        return False
    print('you touched me!')
    return True
/c/
You should have noticed the references to 'super' in the above example. This is because, when you override one these event handlers, you become responsible for all of the required functionality. For the sections that you are not interested in overriding, you can use 'super' to use the code from the base class.

The last category of events are those generated by the Clock object. Because of the way Kivy's event loop manages event handlers, you can't have any kind of infinite loop in you code that executes some code repeatedly. This will end up blocking the rest of the system and staying stuck in your loop. But, you may have a legitimate reason for wanting to repeat a chunk of code in your event handler. If so, the correct way to do this is with the Clock object. With the Clock, you can schedule function calls for some point in the future, either once or repeatedly. for example, the following code fires your callback function every second.
/c/
def my_callback(dt):
    pass
Clock.schedule_interval(my_callback, 1.0)
/c/
In this example, the callback function doesn't actually do anything. The parameter 'dt' is the delta time, and is always handed in to your callback function.

@ Subheading7  -  Non-widget Stuff
There are several other classes available that provide nice-to-have functionality for your code. The Animation class provides a set of pre-packaged transitions that smoothly move widgets from one state to another. For example, you could have the text for a Label object fade into view, without having to write and debug a bunch of your own code. We didn't get a chance to talk about textures, but there is an include Atlas class that allows you to bundle a number of textures together into a single image file. This helps simplify image downloading. The last extra class is the UrlRequest class. This class provides a way to interact with things out on the Internet outside of the main loop. This way you can do something like downloading a file from a web site without blocking your entire interface while you are waiting for it finish.



@ Supporting images
IMAGE1  -  kivy1.png
IMAGE2  -  kivy2.png
IMAGE3  -  kivy3.png



@ Captions
IMAGE1  -  Kivy does smooth multi-image, multi-touch displays really easy to code.
IMAGE2  -  Kivy builds up from the low-level interface libraries to the high-level objects like widgets.
IMAGE3  -  The Kivy examples provide a showcase application that lets you see almost all of the widgets available.



@ 2x boxouts
@ Boxout1  -  56 words
Using Kivy as your GUI toolkit, you can easily do your code development on your desktop. You can then move it off to your Raspberry Pi project with usually no code changes at all. For people who have used a descriptive GUI language, like glade, Kivy provides the Kv language that behaves in the same way.

@ Boxout2  -  61 words
With Kivy, you can easily control most of its functionality through the setting of environment variables. For example, you could set KIVY_WINDOW to 'x11'. This will force Kivy to use the X11 windowing environment. You also have control over audio, camera usage, OpenGL implementation to use, among other elements. These options can also be placed within a configuration file, too.



@ 2x Pullquotes
@ Pullquote1
Since Kivy is a full GUI toolkit, it will involve a bit more boilerplate code wrapping the actual functional bits.

@ Pullquote2
As with many other graphical toolkits, Kivy gives you a set of classes, called layouts, that manage the physical organization of the various elements.



[IMAGE USAGE FORM INFO: PLEASE GIVE COMPANY AND CONTACT DETAILS FOR THE IMAGES USED IN THIS FEATURE]
