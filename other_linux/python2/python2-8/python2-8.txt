Pi code-based tutorial, 4 pages
-feel free to include commands and small segments of code in-line with the body text, but for larger chunks of code please use figure references or refer people to the coverdisc as we can supply them with code, if you send it in with your commission.
Note: please indicate where code starts and ends with /c/ and any output with /o/, as it enables a non-tech savvy art person to layout the pages e.g.
/c/
$ telnet 192.168.1.200 8000
/c/
/o/
Trying 192.168.1.200...
/o/

Code takes up a lot of space, so if you decide to separate out any code onto a line on its own you will need to REMOVE words from the total word count for the section your writing. This works out as follows:
One line of code is equal to 30 words (we have a line break before and after code that is being pulled out of the body copy, which is why it takes up more space), two lines of code are equal to 40 words and three lines are equal to 50 words and so on.

Note: We've included the number of characters as an extra useful reference for each section as sometimes a word count can be less accurate depending on the length of words that are used.

@ Title  -  7 words
PyInstaller - How to share your Pi projects



@ Standfirst  -  19 words
This month, we will look at one of the options available to make sharing your Raspberry Pi project easier.



@ Profile
[Joey Bernard]
Joey Bernard has written a column on scientific software, as well as a column on writing Python code for the Raspberry Pi. In his day job, he helps researchers and students at the university level in designing and running HPC projects on supercomputing clusters.



@ Resources
List everything required for this tutorial and provide URLs if applicable.
If you are using hardware, mention it and a possible stockist. For software, please provide a URL.

@ Lead image
Supply an engaging main image to illustrate the feature (grey box in the example PDF); either an interesting, representative and uncropped screenshot of the software, or if there is nothing appropriate then either round up all of the relevant icons or suggest a possible illustration or diagram recreation and we will create some artwork in-house.

NOTE: this compulsory as you can see from the PDF this is large on the first page. If you have an idea for an illustration or a hardware shot, please contact us as early as you can to allow us to get that organised.

Total word count is 2,952 (roughly 16,940 char).

@ Intro text  -  175 words
Over the life of this column, we have looked at several techniques in Python programming that you can add to your own project. But, once you have a project put together, how do you share it out with the broader audience of DIY and maker people out there? This month, we will look at one of the options available to package your Python program, specifically PyInstaller. PyInstaller is designed to package together everything you would need in order to run your code on a different machine. This is probably the easiest way for a new user to pick up your project and to start using it right away. We will look at installing PyInstaller, configuring it for your project, and also some possible problem areas that might come up in special cases. As well, we will look at other options, such as py2exe, that might offer a different set of capabilities that could fit your requirements better. As in most cases, there are different tools because people have different requirements that need to be fulfilled.



@ Body text
@ Subheading1  -  Introduction
So, what does PyInstaller actually do to package your project up? Normally, you give it a single Python script that is the starting point for your project. PyInstaller then goes through it and collects a list of all of the other modules and scripts that is used by this main script. All of this code is then copied into a distribution directory, along with the active Python distribution that is being used on the system. At this stage, you should have everything you need to run the project on a similar system. A similar system, in this case, means the same type of hardware and the same operating system. This means that if you want to create a package for a particular system, say Mac OSX for example, you will need to build the PyInstaller package on that same system.

Once all of the files are collected together into one location, you can then create an executable file that can include all of the files that are needed. There are several options available to control how these files are unpacked on the end-user's system. We will look at a few of them later in this article, to see what options you might find most useful.

@ Subheading2  -  Installation
Installation is the same for most people. Most distributions do not include PyInstaller as a module managed by the system package management system. This means that you will need to install PyInstaller using pip. Most Linux distributions have different versions of pip for Python 2.X and Python 3.X. For example, if you wanted to install PyInstaller for Python 3, you could use the following command.
/c/
sudo pip3 install pyinstaller
/c/
This will install PyInstaller in to the system library 

@ Subheading3  -  Basic Usage
@ Subheading4  -  Adding Extra Files
@ Subheading5  -  Spec files
@ Subheading6  -  Possible Problems
@ Subheading7  -  Comparing to py2exe and freeze
@ Subheading8  -  What now?



2,752 words (rouhgly 15,800 chars)

Use 8 subheadings (or crossheads) to break this text up.

@ Supporting images
3 images required; please indicate whether we need to crop in on a particular part of a screenshot.

If you wish to include diagrams, supply a reference copy and we will re-create this in-house.

If you are referencing sections of code, please make them as Figure 1, 2 and so on and mention them in the copy.

@ Captions
Images need captions, which need to be around 15 words each.

A note on captions:
These are a device intended to provide additional information that's not directly in the text of the tutorial or simply stating what the picture is of. A caption that effectively says 'This is X' isn't a good caption.

@ 2x boxouts
60 words each (roughly 350 chars); Needs a title up to 5 words. The contents can be a general tip/trick or piece of knowledge related to this tutorial, or you can go into greater depth on one particular aspect of it.

A note on boxouts:
Boxouts are intended to be 'access points' into the page, so they are meant to be interesting little reads in their own right that hopefully encourage someone scanning the page to dip into the whole tutorial. You can never assume that the reader is actually going to read your words, you have to use all the tricks to encourage them to read.

@ 2x Pullquotes
Choose a short quote, around 15 words, to pull the reader in as they flick through the pages.


[IMAGE USAGE FORM INFO: PLEASE GIVE COMPANY AND CONTACT DETAILS FOR THE IMAGES USED IN THIS FEATURE]
